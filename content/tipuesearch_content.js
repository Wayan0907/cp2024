var tipuesearch = {"pages": [{'title': 'About', 'text': '課程倉儲:\xa0 https://github.com/mdecycu/cp2024 \n 課程網頁:\xa0 https://mde.tw/cp2024 \n 課程目標: \n 利用 Python 程式協助執行機電整合系統設計 \n 課程教材: \n Learn Python with Jupyter \n USB 隨身碟: \n 下載  python_2025_lite.7z  (428 MB, 解開壓縮後約 1.5 GB) \n CAD 套件:\xa0 Solvespace \n 機電模擬:\xa0 CoppeliaSim \n 課程評分: \n 全勤出席 (10%) \n Github Classroom 作業 (40%) \n 期末口頭與書面專題報告 (50%) \n \n 行事曆 \n  全頁檢視  \n \n', 'tags': '', 'url': 'About.html'}, {'title': 'Jupyter', 'text': 'USB 隨身碟: \n 下載  python_2025_lite.7z  (428 MB, 解開壓縮後約 1.5 GB) \n 以 start_ipv6.bat 開啟隨身碟中的可攜程式環境後: \n 在命令列視窗中, 輸入 jupyter lab --collaborative 可在瀏覽器中開啟 Jupyter lab \n Jupyter lab 的伺服器 ip 設定位於 home_ipv6\\.jupyter\\jupyter_server_config.py 檔案中的 c.ServerApp.ip 變數 \n 若希望讓其他用戶透過網路進行協同編輯, 可從命令列視窗中, 輸入 jupyter server list 取得登入所需的 token \n 各 Jupyter lab 用戶可從左方的 Collaboration 頁面中檢視參與協同者的名單 \n', 'tags': '', 'url': 'Jupyter.html'}, {'title': 'W&H', 'text': '\n \n 40723210_2018.7z \xa0( https://github.com/s40723210/cp2018 ) \n https://www.verytechnology.com/iot-insights/why-mechanical-engineers-should-embrace-python-programming \n Python for Mechanical Engineers  (機械工程師 (適用) 的 Python) -  Video1 ,  Video2 \n Python installation \n Basics of Python \n Data Types in Python Loops - For Loop Loops - If Loop Loops _While Loop Functions in Python \n Numpy library - Working with Arrays and Matrices \n Ploting with Matplotlib \n Programs on Mechanics and Machine Design \n Programs on Mechanical Vibration \n Programs on Thermal System \n Engineering Math \n Advanced Engineering Programs \n Python for Everyone  (所有人 (適用) 的 Python) \n Why we program? \n Installing Python \n Variables and Expressions \n Conditional Code \n Functions \n Loops and Iteration \n Why and How? \n 設計運算: \n https://www.studysmarter.co.uk/explanations/engineering/design-engineering/design-calculation/  (一般工程運算) \n fem_and_runge-kutta.7z \n meArm_robot_ik_sympy.7z \n stl_splliter.7z  (S TL 格式 組立件拆解) \n https://github.com/KmolYuan/Pyslvs-UI  (平面機構合成) \n 控制與模擬: \n https://docs.wokwi.com/  (機電控制系統模擬) \n https://mde.tw/cad2024/content/CoppeliaSim.html  (機電系統模擬) \n https://github.com/mdecycu/PyWeb3D  (3D 造型模擬) \n https://thebookofshaders.com/?lan=ch  (著色運算) \n 內容管理: \n https://github.com/mdecycu/cmsimde  (內容管理系統) \n https://www.odoo.com  (企業管理系統) \n https://github.com/mdecycu/pj5073  (內容管理系統) \n CAD 套件應用延伸: \n https://mde.tw/cad2024/content/NXOpen.html  (利用程式建立零組件) \n https://github.com/mdecycu/nxopen \n', 'tags': '', 'url': 'W&H.html'}, {'title': 'DC', 'text': 'Design Calculation \n 設計運算: \n https://www.studysmarter.co.uk/explanations/engineering/design-engineering/design-calculation/  (一般工程運算) \n fem_and_runge-kutta.7z  (有限元素分析與 Runge-Kutta 數值分析) \n meArm_robot_ik_sympy.7z  (符號式逆向運動分析) \n stl_splliter.7z  (S TL 格式 組立件拆解) \n https://github.com/KmolYuan/Pyslvs-UI  (平面機構合成) \n', 'tags': '', 'url': 'DC.html'}, {'title': 'AI', 'text': 'From  ChatGPT : \n 請條列出您對於初學計算機程式課程的機械設計工程系大一學生的建議 : \n 1. 選擇適合的編程語言 \xa0\xa0\xa0 Python：簡單易學，語法直觀，適合初學者。 \xa0\xa0\xa0 C/C++：常見於工程應用，有助於理解底層運作原理。 2. 打好基礎概念 \xa0\xa0\xa0 變數和數據類型：了解不同類型數據的存儲和操作方式。 \xa0\xa0\xa0 控制結構：如條件語句(if-else)和循環(for, while)。 \xa0\xa0\xa0 函數：學會如何定義和調用函數，提高代碼重用性。 3. 理解數據結構和算法 \xa0\xa0\xa0 基本數據結構：如陣列、鏈結串列、堆疊、佇列等。 \xa0\xa0\xa0 常見算法：如排序、搜索算法，這些都是解決複雜問題的基礎。 4. 多做練習 \xa0\xa0\xa0 編程題目：如LeetCode、HackerRank等網站上的練習題。 \xa0\xa0\xa0 實際項目：嘗試參與簡單的項目或課程作業，應用所學知識。 5. 理解機械設計與編程的結合 \xa0\xa0\xa0 CAD軟體插件：學習如何用編程來擴展CAD軟體功能。 \xa0\xa0\xa0 模擬和分析工具：如MATLAB，用於數據分析和模擬。 6. 保持好奇心和耐心 \xa0\xa0\xa0 持續學習：編程是一門不斷發展的技術，保持對新技術的好奇心。 \xa0\xa0\xa0 解決問題：學會從錯誤中學習，每次Debug都是一次成長的機會。 7. 參與學習社群 \xa0\xa0\xa0 線上論壇：如Stack Overflow，獲取幫助和資源。 \xa0\xa0\xa0 學校社團：參與校內相關的編程或工程設計社團，增加實踐機會。 8. 管理好學習時間 \xa0\xa0\xa0 制定計劃：安排好學習進度，每天或每週都有固定的編程時間。 \xa0\xa0\xa0 勞逸結合：合理安排休息時間，保持身心健康。 9. 掌握基礎工具 \xa0\xa0\xa0 編輯器和IDE：如VS Code, PyCharm等，選擇一個適合自己的開發環境。 \xa0\xa0\xa0 版本控制：學習使用Git，便於代碼管理和協作。 10. 不斷提升 \xa0\xa0\xa0 參加競賽：如編程競賽或機械設計比賽，提升自己的實力。 \xa0\xa0\xa0 實習經驗：嘗試找實習或參與實際項目，積累工作經驗。 \n 接下來請一律使用中文繁體用語回答, 請就"Python：簡單易學，語法直觀，適合初學者。" 仔細說明緣由,\xa0 Python 對機械設計領域有何用處, 並且舉出實例, 而且列出範例原始碼說明 . \n Python：簡單易學，語法直觀，適合初學者的緣由: \n 緣由說明 \n 語法簡單明瞭：Python的語法設計注重可讀性，使用縮排來表示程式塊，而非繁瑣的括號或關鍵字，使代碼結構清晰易懂。 \n 動態類型語言：變數在使用前無需宣告類型，簡化了代碼撰寫和維護過程。 \n 豐富的標準庫：Python擁有大量的標準庫和第三方庫，涵蓋了網路、檔案處理、數據分析、機器學習等多方面功能，初學者可以方便地使用這些庫來完成複雜的任務。 \n 龐大的社群支持：Python社群活躍，有大量的學習資源、教程和範例代碼，初學者遇到問題時可以輕鬆找到幫助。 Python對機械設計領域的用處 \n 用途說明 \n 自動化任務：Python可以用來自動化重複性工作，如文件處理、數據轉換、報告生成等，節省時間和提高效率 \n 數據分析與可視化：利用 Python 的數據分析和可視化庫（如 Pandas、Matplotlib、Seaborn），可以輕鬆地進行數據處理、分析和圖表繪製，輔助設計決策。 \n CAD軟體插件開發：Python可用於開發 CAD 軟體（如 AutoCAD、SolidWorks）的插件，擴展其功能，實現定制化的設計需求。 \n 數值計算與模擬：使用 NumPy、SciPy 等科學計算庫，可以進行複雜的數值計算和模擬，解決工程中的數學問題。 實例與範例原始碼 \n 實例一：數據分析與可視化 \n 假設我們有一組機械零件的測量數據，需分析其尺寸分佈情況。 \n import pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# 創建假設的數據集\ndata = {\n    \'零件編號\': [\'A\', \'B\', \'C\', \'D\', \'E\'],\n    \'長度(mm)\': [50.5, 49.8, 50.1, 50.0, 49.9],\n    \'寬度(mm)\': [20.2, 20.0, 20.3, 20.1, 20.2]\n}\ndf = pd.DataFrame(data)\n\n# 數據分析\nmean_length = df[\'長度(mm)\'].mean()\nmean_width = df[\'寬度(mm)\'].mean()\n\nprint(f\'平均長度: {mean_length} mm\')\nprint(f\'平均寬度: {mean_width} mm\')\n\n# 數據可視化\nplt.figure(figsize=(10, 5))\nsns.barplot(x=\'零件編號\', y=\'長度(mm)\', data=df)\nplt.title(\'零件長度分佈\')\nplt.show()\n \n 這段代碼創建了一個假設的機械零件測量數據集，並計算其平均長度和寬度，最後使用 Seaborn 程式庫生成長度分佈圖。 \n 計算機械零件測量數據的平均長度和寬度，以及生成長度分佈圖，可以在機械設計和製造過程中有多種用途： \n 1. 質量控制與檢驗 在生產過程中，測量零件的尺寸並計算其平均值和分佈情況，有助於確認產品是否符合設計規範和質量標準。若有偏差，可以及時調整製造工藝，減少次品率。 \n 2. 設計改進 分析零件的實際尺寸數據，可以幫助工程師了解製造過程中的偏差，從而改進設計，提高產品的精度和可靠性。 \n 3. 統計分析 透過統計分析零件的測量數據，工程師可以識別出生產中的異常情況，如機器故障或操作問題，並採取相應措施進行修正。 \n 4. 預測與決策支持 統計數據可以作為製造過程中決策支持的依據，例如調整加工參數、預測壽命、安排維護等。 \n 5. 供應鏈管理 了解零件的尺寸分佈，可以幫助企業在供應鏈管理中進行更好的採購和庫存管理，確保供應鏈的穩定性和高效性。 \n 了解零件的尺寸分佈可以在供應鏈管理中提供多方面的幫助，進行更好的採購和庫存管理的原因如下： \n 1. 確保品質穩定 了解零件的尺寸分佈可以確保所採購的零件符合設計規格和品質標準。若尺寸分佈出現較大偏差，可以及時與供應商溝通，確保產品質量穩定，避免因不合格零件導致的生產問題。 \n 2. 減少庫存成本 精確的尺寸數據可以幫助企業更準確地預測零件的需求，避免因過度採購導致的庫存積壓，或因庫存不足而影響生產。這有助於降低庫存成本，提高資金利用效率。 \n 3. 提高生產效率 了解零件的尺寸分佈可以及早發現可能的質量問題，從而及時調整生產計劃，避免因不合格零件進入生產線而引發的停工或返工問題，提升生產效率。 \n 4. 優化供應鏈合作 透過分析零件尺寸分佈，企業可以與供應商合作進行質量改進，提升整體供應鏈的運營效率。透明的數據交流有助於建立更好的合作關係，達到雙贏效果。 \n 5. 制定採購策略 根據零件尺寸分佈情況，企業可以制定更精確的採購策略。例如，若某一批次的零件尺寸分佈較為穩定，企業可以考慮與該供應商加強合作，進行批量採購，從而獲得更好的價格優惠。 \n 6. 風險管理 了解零件的尺寸分佈還可以幫助企業識別供應鏈中的潛在風險，及早制定應對策略。例如，如果發現某供應商的零件尺寸波動較大，可以考慮尋找備選供應商，以減少供應風險。 \n 具體範例說明 假設一家公司需要採購大量的螺栓進行組裝，並且這些螺栓的尺寸需要非常精確才能保證產品的可靠性。公司可以通過以下步驟進行供應鏈管理： 1. 數據收集與分析 \n 公司定期收集每批次螺栓的尺寸數據，並使用 Python 進行分析和可視化，了解螺栓的尺寸分佈情況。 2. 品質控制 \n 如果某一批次的螺栓尺寸分佈偏離設計規格，公司可以立即通知供應商，要求進行改進，並且可以拒收不合格的產品，確保進入生產線的零件都符合標準。 3. 庫存管理 \n 通過分析歷史數據，公司可以預測未來的螺栓需求，合理安排採購計劃，避免庫存積壓或短缺。例如，如果某些時間段的需求量較大，公司可以提前增加庫存，平衡供需。 4. 供應商評估 \n 根據每個供應商提供螺栓的尺寸穩定性和合格率，公司可以進行供應商評估，選擇優質供應商，建立長期合作關係，同時淘汰質量不穩定的供應商。 \n', 'tags': '', 'url': 'AI.html'}, {'title': 'Topics', 'text': 'Topic 1:  基於瀏覽器的分散式版次管理與整合程式開發環境 \n USB 隨身碟: \n 下載  python_2025_lite.7z  (428 MB, 解開壓縮後約 1.5 GB) \n What are Github and Codespaces? \n Hello World - GitHub Docs \n 利用包含學號的字串作為帳號, 申請免費使用 Github. \n Topic 2:  計算機程式課程作業與學員網頁 \n What is  GitHub Classroom ? \n Your repository and Web site \n 線上 Python 教學課程 \xa0(作者:  彭兆蔚 ) \n https://github.com/jerry-git/learn-python3 \n Learn Python with Jupyter \n 機械設計工程師的程式設計環境 \n 大多數設計工具都僅支援 Windows 操作系統 \n 大多數的 CAD/CAE/CAM 都是封閉商用套件 \n Siemens NX 不同版本的 NXOpen Python 程式開發, 必須搭配特定的 Python 版本 \n Windows 下的可攜或基於瀏覽器的 Python 或 CAD/CAE/CAM 環境較符合協同產品設計開發 \n 基於瀏覽器的程式開發環境已經逐步成為主流 (以  Codespaces  為例) \n 基於瀏覽器的 CAD/CAE 也正逐步成形 (Onshpae, Fusion 360, NX X 等) \n Topic 3:  利用 Python 建立網站內容 \n Python Web Applications: Deploy Your Script as a Flask App – Real Python \n 在 Windows 上使用 Python 進行 Web 開發 | Microsoft Learn \n 如何使用\xa0 mdecycu/cmsimde (github.com) \n Topic 4:  利用 Python 控制機電模擬系統 \n 利用\xa0 https://solvespace.com/ \xa0建立機械系統零組件 \n 利用  CoppeliaSim  建立機電模擬系統 \n 利用  Python  跨網路控制瀏覽器上的機電模擬系統 \n Topic 5:  自選期末專案題目 \n', 'tags': '', 'url': 'Topics.html'}, {'title': 'Ebooks', 'text': 'Learn Git \n Git 教程 \n Python 3 教程 \n Python 入門指南 \n', 'tags': '', 'url': 'Ebooks.html'}, {'title': 'Topic 1', 'text': '主題: 基於瀏覽器的分散式版次管理與整合程式開發環境 \n 主題摘要: \n USB 隨身碟: \n 下載  python_2025_lite.7z  (428 MB, 解開壓縮後約 1.5 GB) \n What are Github and Codespaces? \n Hello World - GitHub Docs \n 利用包含學號的字串作為帳號, 申請免費使用 Github. \n Demo: \n 利用  ShareX  錄製教學內容, 透過 mdecourse 帳號將影片上傳至  Youtube \n 利用線上的  Brython 程式環境 , 學習簡單的 Python 程式語法 \n 變數、Print、迴圈、判斷式 \n 練習過的程式碼應該存在那裡? \n Brython  是甚麼? 跟 Python 有何不同? \n Brython  vs.  Pyscript \n Git  與  Github \xa0的應用 \n Codespaces  應用 \n 參考資料: \n https://www.youtube.com/@-kmolab9376/videos \n', 'tags': '', 'url': 'Topic 1.html'}, {'title': 'Topic 2', 'text': '主題: 計算機程式課程作業與學員網頁 \n 主題摘要: \n What is  GitHub Classroom ? \n Your repository and Web site \n 線上 Python 教學課程 \xa0(作者: \xa0 彭兆蔚 ) \n https://github.com/jerry-git/learn-python3 \n Learn Python with Jupyter \n 機械設計工程師的程式設計環境 \n 大多數設計工具都僅支援 Windows 操作系統 \n 大多數的 CAD/CAE/CAM 都是封閉商用套件 \n Siemens NX 不同版本的 NXOpen Python 程式開發, 必須搭配特定的 Python 版本 \n Windows 下的可攜或基於瀏覽器的 Python 或 CAD/CAE/CAM 環境較符合協同產品設計開發 \n 基於瀏覽器的程式開發環境已經逐步成為主流 (以  Codespaces  為例) \n 基於瀏覽器的 CAD/CAE 也正逐步成形 (Onshpae, Fusion 360, NX X 等) \n Demo: \n 利用\xa0 GitHub Classroom \xa0指定各學員的作業倉儲 \n 有了 線上 Python 教學課程 的教學影片, 以及  Jupyter Notebook , 我還需要來上課嗎? :-) \n 機械設計工程師的程式設計環境, 與其他工程專業有何不同? 問題就在 這裡 ! \n 當越來越多的機械設計相關套件逐步轉移到雲端環境: \n 協同設計越來越有效率? \n 最新套件發布後, 不再有盜版軟體? \n AI 智入產品開發流程, 越來越方便? ( claude.ai ,  chatgpt ,  gemini )\xa0 \n 當 大神如是說 , 我還需要學習任何計算機程式語言嗎? \n', 'tags': '', 'url': 'Topic 2.html'}, {'title': 'Topic 3', 'text': '驗收 Topic 2 學員簡報 \n 主題: 利用 Python 建立網站內容 \n 主題摘要: \n Python Web Applications: Deploy Your Script as a Flask App – Real Python \n 在 Windows 上使用 Python 進行 Web 開發 | Microsoft Learn \n 如何使用\xa0 mdecycu/cmsimde (github.com) \n Demo: \n 利用 Brython 建立網站前端內容 \n 利用 Flask 建立網站後端伺服器程式 \n', 'tags': '', 'url': 'Topic 3.html'}, {'title': 'Topic 4', 'text': '主題: 利用 Python 控制機電模擬系統 \n 主題摘要: \n 利用\xa0 https://solvespace.com/ \xa0建立機械系統零組件 \n 利用 \xa0 CoppeliaSim \xa0 建立機電模擬系統 \n 利用 \xa0 Python \xa0 跨網路控制瀏覽器上的機電模擬系統 \n Demo: \n 利用\xa0 https://solvespace.com/ \xa0建立單軸機械臂系統零組件 \n 將單軸機械臂系統零組件轉入\xa0 CoppeliaSim \xa0建立機電模擬系統 \n 利用\xa0 Python \xa0跨網路控制瀏覽器上的機電模擬系統 \n', 'tags': '', 'url': 'Topic 4.html'}, {'title': 'Topic 5', 'text': '主題: 自選期末專案題目 \n', 'tags': '', 'url': 'Topic 5.html'}, {'title': 'Codespaces', 'text': 'https://github.com/features/codespaces \xa0 \n', 'tags': '', 'url': 'Codespaces.html'}, {'title': 'CAD', 'text': 'Solvespace \n https://solvespace.com/ \xa0 \n NX \n https://plm.sw.siemens.com/en-US/nx/ \xa0 \n NXOpen in Python \n CoppeliaSim \n cad2024_foosball_with_ball_python_script.7z \n \n', 'tags': '', 'url': 'CAD.html'}, {'title': 'CoppeliaSim', 'text': '下載相容於 IPv6 的 CoppeliaSim 4.7.0 rev4:  CoppeliaSim_Edu_4.7.0_rev4_for_2024Fall.7z \n https://manual.coppeliarobotics.com/en/versionInfo.htm \n user settings file is C:\\Users\\%USERNAME%\\AppData\\Roaming/CoppeliaSim/usrset.txt \n CoppeliaSim 4.5.1 與 4.7.1 使用 ZMQ RemoteAPI Python 程式的差異: \n \n zmqRemoteApi 模組名稱改為 coppeliasim_zmqremoteapi_client \n sim 物件中的 sim.setJointForce() 方法已經失效, 必須改用 sim.setJointTargetForce() \n \n # zmqRemoteApi_IPv6 為將 zmq 通訊協定修改為 IPv4 與 IPv6 相容\n# pip install pyzmq cbor keyboard\n# for 4.5.1\n#from zmqRemoteApi_IPv6 import RemoteAPIClient\n# for 4.7.1\nfrom coppeliasim_zmqremoteapi_client import RemoteAPIClient\nimport time\nimport math\nimport keyboard\n\n# 利用 zmqRemoteAPI 以 23000 對場景伺服器進行連線\nclient = RemoteAPIClient(\'localhost\', 23000)\n# 以 getObject 方法取得場景物件\nsim = client.getObject(\'sim\')\nbox = sim.getObject(\'/box\')\n\n# 啟動模擬\nsim.startSimulation()\n# 建立尺寸數列, 分別定義 x, y, z 方向尺寸\nx = 0.2\ny = 0.2\nz = 0.1\nsize = [x, y, z]\n\n# 利用 size 數列, 建立圓柱物件, 2 代表 cylinder\n# 8 表示 respondable, 1 為 質量\ndigit1_handle = sim.createPureShape(2, 8, size, 1, None)\n# 將圓柱物件命名為 digit1, 若用於機械計分可做為個位數轉盤\n# 之後可再導入帶有數字組立的外型零件\nsim.setObjectAlias(digit1_handle, \'digit1\')\n# 轉角單位為徑度\nsim.setObjectOrientation(digit1_handle, -1, [0, math.pi/2, 0])\n# 起始物件中心位於 [0, 0, 0], 為了位於地板, 往 z 提升一個半徑高度\nsim.setObjectPosition(digit1_handle, -1, [0, 0, x/2])\n\n# 建立 revolute joint 命名為 joint, 且將 joint mode 設為 dynamic, control mode 設為 velocity\njoint1_handle = sim.createJoint(sim.joint_revolute_subtype, sim.jointmode_dynamic, 0, None)\nsim.setObjectInt32Param(joint1_handle, sim.jointintparam_dynctrlmode, sim.jointdynctrl_velocity)\nsim.setObjectAlias(joint1_handle, \'joint1\')\n\n# 取得 cylinder 的位置座標\ndigit1_pos = sim.getObjectPosition(digit1_handle, -1)\njoint1_pos = [digit1_pos[0], digit1_pos[1], digit1_pos[2]]\n\n# 將 joint1 至於 cylinder 中心\nsim.setObjectPosition(joint1_handle, -1, joint1_pos)\n# 取得 digit1_handle 的方位\ndigit1_ori = sim.getObjectOrientation(digit1_handle, -1)\n# 將 joint1_handle 方位與 digit1 對齊\nsim.setObjectOrientation(joint1_handle, -1, digit1_ori)\n\n# 將 joint1 置於 box 上\nsim.setObjectParent(joint1_handle, box, True)\n# 將 cylinder 置於 joint1 上\nsim.setObjectParent(digit1_handle, joint1_handle, True)\n\n# 鎖定 joint1\n# for 4.5.1\n#sim.setJointForce(joint1_handle, float(\'inf\'))\n# for 4.7.1\nsim.setJointTargetForce(joint1_handle, float(\'inf\'))\n\nprint("基本場景建立完成!")\n\n# 設定主迴圈\nwhile True:\n    # 設定 joint1 目標速度\n    sim.setJointTargetVelocity(joint1_handle, 10)\n    # 讓 coppeliasim 有時間按照設定讓 joint1 旋轉\n    time.sleep(0.01) \n\n    if keyboard.is_pressed(\'q\'):\n        # 可以按下 q 鍵跳出重複執行迴圈\n        break\n\n# 終止模擬\nsim.stopSimulation()\n\n \n \n', 'tags': '', 'url': 'CoppeliaSim.html'}, {'title': 'Python', 'text': 'Python 執行環境 \n Brython (全球資訊網上的 Python) \n Cospaces \n Gitpod \n Windows 操作系統 \n 制式安裝 (VSCode and SciTE) \n 可攜設定 (VSCode and SciTE) \n USB 隨身碟: \n 下載  python_2025_lite.7z  (428 MB, 解開壓縮後約 1.5 GB) \n kmolab_ex.7z  (314MB) \n Ubuntu 操作系統 \n Types : Integers, Floats, Strings and Booleans \n Type Conversion \n Variables and Assignment \n Arithmetic Operators \n Comparison Operators \n Logical Operators \n Conditional Statements (if, elif, else) \n Loops (for, while) \n break, continue and pass \n Lists \n Tuples \n Sets \n Dictionaries \n Defining and Calling Functions \n Arguments and Return Values \n Local and Global Variables \n Importing  Modules \n Standard Library \n https://github.com/TheAlgorithms/Python \xa0 \n nxopen_base_and_center_pole_python.txt \n qrcode \n https://en.wikipedia.org/wiki/QR_code \n https://www.funcode-tech.com/QR_app.html \n # pip install qrcode matplotlib\nimport qrcode\nimport matplotlib.pyplot as plt\nimport matplotlib.image as mpimg\n#img=qrcode.make(\'20240101;5745632912;Steel;---;---\')\nimg=qrcode.make(\'虎尾科大機械設計工程系\')\nimg.save(\'qrcode_ex1.png\')\nimg = mpimg.imread(\'qrcode_ex1.png\')\nplt.imshow(img)\nplt.show() \n pdf \n pip install pypdf2 \n split pdf file: \n # pypdf2_split.py\nimport os\nfrom PyPDF2 import PdfWriter, PdfReader\n\npdfReader = PdfReader(open("Learn_Autodesk_Inventor_2018_Basics.pdf", "rb"))\ninformation = [("inventor",18,45)]\n \nfor page in range(len(information)):\n    pdf_writer = PdfWriter()\n    start = information[page][1]\n    end = information[page][2]\n    while start<=end:\n        pdf_writer.add_page(pdfReader.pages[start-1])\n        start+=1\n    if not os.path.exists("./"):\n        os.makedirs(savepath)\n    output_filename = \'{}_{}_page_{}.pdf\'.format(information[page][0],information[page][1], information[page][2])\n    with open(output_filename,\'wb\') as out:\n        pdf_writer.write(out)\nprint("已經完成 pdf 切割與存檔") \n combine pdf file: \n import os\nfrom PyPDF2 import PdfWriter, PdfReader\n\npdf_write_object = PdfWriter()\n\npdfFileNames = ["inventor1.pdf", "inventor2.pdf"]\nnewFileName = "inventor"\nfilenameString = ""\n\nfor filename in pdfFileNames:\n    pdf_read_object = PdfReader(open(filename, "rb"))\n    filenameString += filename + ", "\n    for page in range(len(pdf_read_object.pages)):\n        pdf_write_object.add_page(pdf_read_object.pages[page])\n \nfinal_file_object = open(newFileName + ".pdf", \'wb\')\npdf_write_object.write(final_file_object)\nfinal_file_object.close()\n\nprint("已經將 " + filenameString+ " 合併為: "+ newFileName + ".pdf")\n \n Pelican Blog md generator \n https://github.com/mdecycu/pelican_md_generator \n NXOpen Python \n 機械設計工程師若能夠看得懂  nxopen_base_and_center_pole_python.txt , 是否能夠將程式碼改寫為 Function 或 Class 架構, 以方便用程式方法建立機電系統設計中的參數式零組件? \n ZMQ remote API Python for CoppeliaSim \n 可遠端透過 Python 程式控制機電模擬系統的  cd2023_pj3ag4_zmq_football4.7z , 則牽涉 ZMQ、IPv4、IPv6 與  asyncio  模組. \n Python for Webots \n Python 程式也能用來控制 Webots 機電模擬系統:  https://cyberbotics.com/doc/guide/using-python \n Python 與 CAD 有關的其他應用 \n https://pypi.org/project/python-solvespace/ \n https://github.com/jimy-byerley/pymadcad', 'tags': '', 'url': 'Python.html'}, {'title': 'Brython', 'text': '從 1 累加到 100: \n 1 add to 100 \n  導入 brython 程式庫  \n \n \n \n \n  啟動 Brython  \n \n \n \n  導入 FileSaver 與 filereader  \n \n \n \n \n  導入 ace  \n \n \n \n \n \n \n  導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫  \n \n \n \n \n \n \n  請注意, 這裡使用 Javascript 將 localStorage["kw_py_src1"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱 \n \n \n \n \n \n \n  add 1 to 100 開始  \n \n \n  add 1 to 100 結束 \n  editor1 開始  \n  用來顯示程式碼的 editor 區域  \n \n  以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合  \n  存擋表單開始  \n Filename:  .py   \n  存擋表單結束  \n \n  執行與清除按鈕開始  \n Run   Output   清除輸出區 清除繪圖區 Reload \n  執行與清除按鈕結束  \n \n  程式執行 ouput 區  \n \n  Brython 程式執行的結果, 都以 brython_div1 作為切入位置  \n \n  editor1 結束   ##########################################  \n 從 1 累加到 100 part2: \n 1 add to 100 cango_three_gears BSnake AI Tetris Rotating Block \n  請注意, 這裡使用 Javascript 將 localStorage["kw_py_src2"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱 \n \n \n \n  add 1 to 100 part2 開始  \n \n \n  add 1 to 100 part2 結束 \n  editor2 開始  \n  用來顯示程式碼的 editor 區域  \n \n  以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合  \n  存擋表單開始  \n Filename:  .py   \n  存擋表單結束  \n \n  執行與清除按鈕開始  \n Run   Output   清除輸出區 清除繪圖區 Reload \n  執行與清除按鈕結束  \n \n  程式執行 ouput 區  \n \n  Brython 程式執行的結果, 都以 brython_div1 作為切入位置  \n \n  editor2 結束  \n \n \n', 'tags': '', 'url': 'Brython.html'}]};