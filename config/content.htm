<h1>About</h1>
<p>課程倉儲: <a href="https://github.com/mdecycu/cp2024">https://github.com/mdecycu/cp2024</a></p>
<p>課程網頁: <a href="https://mde.tw/cp2024">https://mde.tw/cp2024</a></p>
<p>課程目標:</p>
<p style="padding-left: 30px;">學習如何利用 Python 程式協助執行機電整合系統設計</p>
<p>課程教材:</p>
<p style="padding-left: 30px;"><a href="https://blog.jupyter.org/introducing-learn-python-with-jupyter-11214f152159">Learn Python with Jupyter</a> (<a href="https://www.learnpythonwithjupyter.com/">site</a>, <a href="/downloads/learn_python_with_jupyter.pdf">ebook</a>)</p>
<p>Teams 線上教學:</p>
<p style="padding-left: 30px;">以 "學號@nfu.edu.tw" 登入 <a href="https://login.microsoftonline.com/">https://login.microsoftonline.com/</a> Office 365</p>
<p style="padding-left: 30px;">Teams 團隊代碼: <span class="fui-Text ___vec8h90 fk6fouc f1pbo8a8 f1i3iumi figsok6 fpgzoln f1w7gpdv f6juhto f1mtd64y f1y7q3j9 f2jf649 foxqkq2" data-tid="join-team-code">ldodwua</span></p>
<p>USB 隨身碟:</p>
<p style="padding-left: 30px;">下載 <a href="http://229.cycu.org/python_2025_lite.7z">python_2025_lite.7z</a> (428 MB, 解開壓縮後約 1.5 GB)</p>
<p><span>CAD 套件: </span><a href="https://solvespace.com/">Solvespace</a></p>
<p><span>機電模擬: </span><a href="https://www.coppeliarobotics.com/">CoppeliaSim</a></p>
<p>課程評分:</p>
<p style="padding-left: 30px;">出席 (10%) - 自行舉證評分</p>
<p style="padding-left: 30px;">Github Classroom 作業與隨堂考試 (70%) - 以 Github 帳號領取作業倉儲後, 建立包含操作流程影片與檔案下載的網頁</p>
<p style="padding-left: 30px;">期末口頭與書面專題報告 (20%) - 利用網頁內容進行簡報並提交 pdf 格式書面報告</p>
<hr/>
<p>行事曆</p>
<p><a href="https://calendar.google.com/calendar/embed?src=mde.nfu.edu.tw_3439313938333136353439%40resource.calendar.google.com&amp;ctz=Asia%2FTaipei&amp;mode=week&amp;src=mde.nfu.edu.tw_35303530373431313438%40resource.calendar.google.com&amp;ctz=Asia%2FTaipei&amp;src=yen%40gm.nfu.edu.tw&amp;ctz=Asia%2FTaipei"> 全頁檢視 </a></p>
<p><iframe height="600" src="https://calendar.google.com/calendar/embed?src=mde.nfu.edu.tw_3439313938333136353439%40resource.calendar.google.com&amp;ctz=Asia%2FTaipei&amp;mode=week&amp;src=mde.nfu.edu.tw_35303530373431313438%40resource.calendar.google.com&amp;ctz=Asia%2FTaipei&amp;src=yen%40gm.nfu.edu.tw&amp;ctz=Asia%2FTaipei" width="800"></iframe></p>
<h2>Office365</h2>
<p>計算機程式上課時段將利用 MS Teams 進行線上串流, 學員登入 @nfu 網域的 Teams 後, 可以即時觀看 demo 電腦的桌面, 而關鍵操作畫面將會透過錄影存為 .mp4 後上傳至 <a href="https://www.youtube.com/@-kmolab9376">Mdecourse</a>.</p>
<p>首次使用 @nfu 網域設置的 MS Office 365, 請參考下列步驟登入計算機程式課程的 MS Teams:</p>
<ol>
<li>學校 web mail: <a href="https://mail.nfu.edu.tw">https://mail.nfu.edu.tw</a></li>
<li>密碼重置系統: <a href="https://pwd.nfu.edu.tw/">https://pwd.nfu.edu.tw/</a></li>
<li>登入 <a href="https://mail.nfu.edu.tw">https://mail.nfu.edu.tw</a> 後收信匣中, 可看到校方寄出的 "Office 365 學生帳號說明"信件, 說明如何登入 Office 365</li>
<li>登入 Office 365 後, 若在電腦教室可以選擇使用網頁版</li>
<li>線上課程將使用 Office 365 的 Teams, 計算機程式課程的 Teams 團隊代碼: <span class="fui-Text ___vec8h90 fk6fouc f1pbo8a8 f1i3iumi figsok6 fpgzoln f1w7gpdv f6juhto f1mtd64y f1y7q3j9 f2jf649 foxqkq2" data-tid="join-team-code">ldodwua</span></li>
</ol>
<p><span class="fui-Text ___vec8h90 fk6fouc f1pbo8a8 f1i3iumi figsok6 fpgzoln f1w7gpdv f6juhto f1mtd64y f1y7q3j9 f2jf649 foxqkq2" data-tid="join-team-code">申請 Github 帳號步驟:</span></p>
<ol>
<li><span class="fui-Text ___vec8h90 fk6fouc f1pbo8a8 f1i3iumi figsok6 fpgzoln f1w7gpdv f6juhto f1mtd64y f1y7q3j9 f2jf649 foxqkq2" data-tid="join-team-code">連結至 <a href="https://github.com/join">https://github.com/join</a></span></li>
<li><span class="fui-Text ___vec8h90 fk6fouc f1pbo8a8 f1i3iumi figsok6 fpgzoln f1w7gpdv f6juhto f1mtd64y f1y7q3j9 f2jf649 foxqkq2" data-tid="join-team-code">填寫基本資訊:<br/>   - Username：輸入希望採用的用戶名稱, 若無法使用自己的學號, 可以在學號前加入英文姓名三個簡寫字母<br/>   - Email address：輸入電子郵件地址, 可以使用上列學校配發的電子郵件地址<br/>   - Password：設定密碼</span></li>
<li><span class="fui-Text ___vec8h90 fk6fouc f1pbo8a8 f1i3iumi figsok6 fpgzoln f1w7gpdv f6juhto f1mtd64y f1y7q3j9 f2jf649 foxqkq2" data-tid="join-team-code">完成驗證: GitHub 會要求完成驗證以確認不是機器人, 通常需要選擇或標記圖片來完成這個步驟</span></li>
<li><span class="fui-Text ___vec8h90 fk6fouc f1pbo8a8 f1i3iumi figsok6 fpgzoln f1w7gpdv f6juhto f1mtd64y f1y7q3j9 f2jf649 foxqkq2" data-tid="join-team-code">選擇 Free 方案後可以選擇是否願意訂閱電子報</span></li>
<li><span class="fui-Text ___vec8h90 fk6fouc f1pbo8a8 f1i3iumi figsok6 fpgzoln f1w7gpdv f6juhto f1mtd64y f1y7q3j9 f2jf649 foxqkq2" data-tid="join-team-code">點擊 Create account 按鈕以完成註冊</span></li>
<li><span class="fui-Text ___vec8h90 fk6fouc f1pbo8a8 f1i3iumi figsok6 fpgzoln f1w7gpdv f6juhto f1mtd64y f1y7q3j9 f2jf649 foxqkq2" data-tid="join-team-code">帳號建立後, GitHub 會發送一封驗證郵件, 必須點擊其中的驗證連結才能開始使用 Github 建立倉儲與 Gist</span></li>
<li><span class="fui-Text ___vec8h90 fk6fouc f1pbo8a8 f1i3iumi figsok6 fpgzoln f1w7gpdv f6juhto f1mtd64y f1y7q3j9 f2jf649 foxqkq2" data-tid="join-team-code">驗證郵件後, 可以登入 GitHub 進行基本設置, 例如:個人資料、SSH 金鑰配置等<br/><br/></span></li>
</ol>
<p><span class="fui-Text ___vec8h90 fk6fouc f1pbo8a8 f1i3iumi figsok6 fpgzoln f1w7gpdv f6juhto f1mtd64y f1y7q3j9 f2jf649 foxqkq2" data-tid="join-team-code">Github 帳號的 Two-factor authentication (兩段式認證):<br/></span></p>
<p style="padding-left: 30px;"><span class="fui-Text ___vec8h90 fk6fouc f1pbo8a8 f1i3iumi figsok6 fpgzoln f1w7gpdv f6juhto f1mtd64y f1y7q3j9 f2jf649 foxqkq2" data-tid="join-team-code">透過 <a href="https://chatgpt.com/">https://chatgpt.com/</a> 詢問:</span></p>
<p style="padding-left: 60px;"><span class="fui-Text ___vec8h90 fk6fouc f1pbo8a8 f1i3iumi figsok6 fpgzoln f1w7gpdv f6juhto f1mtd64y f1y7q3j9 f2jf649 foxqkq2" data-tid="join-team-code">"Github 帳號的 Two-factor authentication 如何設定?"</span></p><h2>Evaluate</h2>
<p>網頁內容評分: 用來評量受評者的作業網頁內容, 是否完整且充實</p>
<p>操作影片評分: 用來評量受評者所提供的操作影片內容, 是否說明清楚, 提供字幕且完整呈現標的內容</p>
<p>倉儲提交說明: 用來評量受評者所提供的倉儲提交說明是否清楚, 以及提交次數及頻率, 是否足以證明其用功程度</p>
<p>下載檔案評分: 用來評量受評者在作業網頁上所提供的檔案下載內容, 是否完整且內容充實</p>
<p>作業心得評分: 用來評量受評者的作業心得是否內容豐富, 且值得令人讚賞與學習</p>
<hr/>
<p>以上各分項評分各佔 20%, 評分基準如下:</p>
<p>非常棒 - 得 20 分 (即一百分, 表現非常棒且完美的評分)</p>
<p>很棒 - 得 18 分 (即九十分, 表現很棒的的評分)</p>
<p>很好 - 得 16 分 (即八十分, 表現很好的評分)</p>
<p>還可以 - 得 14 分 (即七十分, 表現還可以的評分)</p>
<p>及格 - 得 12 分 (即六十分, 表現算是及格的評分)</p>
<p>需加強 - 得 10 分 (即五十分, 需要再加強的評分)</p>
<h2>Jupyter</h2>
<p>USB 隨身碟:</p>
<p style="padding-left: 30px;">下載 <a href="http://229.cycu.org/python_2025_lite.7z">python_2025_lite.7z</a> (428 MB, 解開壓縮後約 1.5 GB)</p>
<p>利用 Jupyter 建立 .ipynb 格式的 notebook 檔案:</p>
<ol>
<li>以 start_ipv6.bat 開啟隨身碟中的可攜程式環境</li>
<li>在命令列視窗中, 輸入 jupyter lab --collaborative 後可在瀏覽器中開啟 Jupyter lab</li>
<li>系統內定以執行 jupyter lab --collaborative 指令所在目錄作為根目錄</li>
<li>Jupyter lab 的伺服器 ip 設定位於 home_ipv6\.jupyter\jupyter_server_config.py 檔案中的 c.ServerApp.ip 變數, 內定為 localhost, 使用者可以自行修改為電腦連外 IPv4 或 IPv6 位址</li>
<li>home_ipv6\.jupyter\jupyter_server_config.py 檔案中的 c.ServerApp.port = 8888 為內定連線埠號</li>
<li>系統內定使用 http 連線, 使用者可利用 openssl 建立 cert.pem 與 key.pem, 並與 c.ServerApp.certfile 及c.ServerApp.keyfile 等系統變數綁定後, 使用 https 連線</li>
<li>若希望讓其他用戶透過網路進行協同編輯, 可從命令列視窗中, 輸入 jupyter server list 取得登入所需的 token, 或將設定修改為使用者自訂的密碼登入</li>
<li>各 Jupyter lab 用戶可從左方的 Collaboration 頁面中檢視參與協同者的名單</li>
<li>使用結束後, 以 File - Shutdown 關閉 Jupyterlab</li>
</ol>
<p>利用 openssl 指令建立 cert.pem 與 key.pem:</p>
<p style="padding-left: 30px;">openssl req -newkey rsa:2048 -new -nodes -x509 -days 3650 -keyout key.pem -out cert.pem</p>
<p>使用 https 連線時, cert.pem 與 key.pem 設定:</p>
<p style="padding-left: 30px;">c.ServerApp.certfile = u'y:\home_ipv6\.jupyter\cert.pem'</p>
<p style="padding-left: 30px;">c.ServerApp.keyfile = u'y:\home_ipv6\.jupyter\key.pem'</p>
<p>Jupyter 中使用 iframe 標註:</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">from IPython.display import IFrame
IFrame('https://mde.tw', width=700, height=350)</pre>
<p>分享 .ipynb 檔案內容:</p>
<p>將 .ipynb 檔案上傳至作業網站中的 downloads 目錄後, 完成提交推送至 Github 後, 將連結附加在 <a href="https://nbviewer.org/urls/">https://nbviewer.org/urls/</a> 之後.</p>
<p>將 .ipynb 檔案內容放入個人 Github 帳號下的 Gist 後, , 將連結附加在 <a href="https://nbviewer.org/urls/">https://nbviewer.org/urls/</a> 之後.</p>
<p>例如: 以下提供 Gist 中的 .ipynb</p>
<p style="padding-left: 30px;"><a href="https://nbviewer.org/urls/gist.githubusercontent.com/mdecycu/eb2e4327b65a0fe5c307ea329ef2f69c/raw/a7f40c0fd78b7f969021fdcf234087c9d21d7ad3/01_string_input_print.ipynb">01_string_input_print.ipynb</a></p>
<h2>W&amp;H</h2>
<p>為什麼學習 Python, 如何應用 Python?</p>
<p><a href="http://229.cycu.org/40723210_2018.7z">40723210_2018.7z</a> (<a href="https://github.com/s40723210/cp2018">https://github.com/s40723210/cp2018</a>)</p>
<p><a href="https://www.verytechnology.com/iot-insights/why-mechanical-engineers-should-embrace-python-programming">https://www.verytechnology.com/iot-insights/why-mechanical-engineers-should-embrace-python-programming</a></p>
<p><a href="https://www.udemy.com/course/python-for-mechanical-engineers">Python for Mechanical Engineers</a> (機械工程師 (適用) 的 Python) - <a href="https://youtu.be/WFwH0d-Q2NY">Video1</a>, <a href="https://youtu.be/3RxoTim2PgM">Video2</a></p>
<p style="padding-left: 30px;">Python installation</p>
<p style="padding-left: 30px;">Basics of Python</p>
<p style="padding-left: 60px;">Data Types in Python<br/>Loops - For Loop<br/>Loops - If Loop<br/>Loops _While Loop<br/>Functions in Python</p>
<p style="padding-left: 30px;">Numpy library - Working with Arrays and Matrices</p>
<p style="padding-left: 30px;">Ploting with Matplotlib</p>
<p style="padding-left: 30px;">Programs on Mechanics and Machine Design</p>
<p style="padding-left: 30px;">Programs on Mechanical Vibration</p>
<p style="padding-left: 30px;">Programs on Thermal System</p>
<p style="padding-left: 30px;">Engineering Math</p>
<p style="padding-left: 30px;">Advanced Engineering Programs</p>
<p><a href="https://www.coursera.org/learn/python#modules">Python for Everyone</a> (所有人 (適用) 的 Python)</p>
<p style="padding-left: 30px;">Why we program?</p>
<p style="padding-left: 30px;">Installing Python</p>
<p style="padding-left: 30px;">Variables and Expressions</p>
<p style="padding-left: 30px;">Conditional Code</p>
<p style="padding-left: 30px;">Functions</p>
<p style="padding-left: 30px;">Loops and Iteration</p>
<p>Why and How?</p>
<p>設計運算:</p>
<p style="padding-left: 30px;"><a href="https://www.studysmarter.co.uk/explanations/engineering/design-engineering/design-calculation/">https://www.studysmarter.co.uk/explanations/engineering/design-engineering/design-calculation/</a> (一般工程運算)</p>
<p style="padding-left: 30px;"><a href="/downloads/fem_and_rk4.7z">fem_and_runge-kutta.7z</a></p>
<p style="padding-left: 30px;"><a href="/downloads/meArm_robot_ik_sympy.7z">meArm_robot_ik_sympy.7z</a></p>
<p style="padding-left: 30px;"><a href="/downloads/stl_splliter.7z">stl_splliter.7z</a> (S<a href="https://en.wikipedia.org/wiki/STL_(file_format)">TL 格式</a>組立件拆解)</p>
<p style="padding-left: 30px;"><a href="https://github.com/KmolYuan/Pyslvs-UI">https://github.com/KmolYuan/Pyslvs-UI</a> (平面機構合成)</p>
<p>控制與模擬:</p>
<p style="padding-left: 30px;"><a href="https://docs.wokwi.com/">https://docs.wokwi.com/</a> (機電控制系統模擬)</p>
<p style="padding-left: 30px;"><a href="https://mde.tw/cad2024/content/CoppeliaSim.html">https://mde.tw/cad2024/content/CoppeliaSim.html</a> (機電系統模擬)</p>
<p style="padding-left: 30px;"><a href="https://github.com/mdecycu/PyWeb3D">https://github.com/mdecycu/PyWeb3D</a> (3D 造型模擬)</p>
<p style="padding-left: 30px;"><a href="https://thebookofshaders.com/?lan=ch">https://thebookofshaders.com/?lan=ch</a> (著色運算)</p>
<p>內容管理:</p>
<p style="padding-left: 30px;"><a href="https://github.com/mdecycu/cmsimde">https://github.com/mdecycu/cmsimde</a> (內容管理系統)</p>
<p style="padding-left: 30px;"><a href="https://www.odoo.com">https://www.odoo.com</a> (企業管理系統)</p>
<p style="padding-left: 30px;"><a href="https://github.com/mdecycu/pj5073">https://github.com/mdecycu/pj5073</a> (內容管理系統)</p>
<p>CAD 套件應用延伸:</p>
<p style="padding-left: 30px;"><a href="https://mde.tw/cad2024/content/NXOpen.html">https://mde.tw/cad2024/content/NXOpen.html</a> (利用程式建立零組件)</p>
<p style="padding-left: 30px;"><a href="https://github.com/mdecycu/nxopen">https://github.com/mdecycu/nxopen</a></p>
<h3>DC</h3>
<p>Design Calculation</p>
<p>設計運算:</p>
<p><a href="https://www.studysmarter.co.uk/explanations/engineering/design-engineering/design-calculation/">https://www.studysmarter.co.uk/explanations/engineering/design-engineering/design-calculation/</a> (一般工程運算)</p>
<p><a href="/downloads/fem_and_rk4.7z">fem_and_runge-kutta.7z</a> (有限元素分析與 Runge-Kutta 數值分析)</p>
<p><a href="/downloads/meArm_robot_ik_sympy.7z">meArm_robot_ik_sympy.7z</a> (符號式逆向運動分析)</p>
<p><a href="/downloads/stl_splliter.7z">stl_splliter.7z</a> (S<a href="https://en.wikipedia.org/wiki/STL_(file_format)">TL 格式</a>組立件拆解)</p>
<p><a href="https://github.com/KmolYuan/Pyslvs-UI">https://github.com/KmolYuan/Pyslvs-UI</a> (平面機構合成)</p>
<h2>AI</h2>
<p>From <a href="https://chatgpt.com">ChatGPT</a>:</p>
<p data-pm-slice="1 1 []"><span style="background-color: #ccffcc;">請條列出您對於初學計算機程式課程的機械設計工程系大一學生的建議</span>:</p>
<p data-pm-slice="1 1 []" style="padding-left: 30px;">1. 選擇適合的編程語言<br/><br/>    Python：簡單易學，語法直觀，適合初學者。<br/>    C/C++：常見於工程應用，有助於理解底層運作原理。<br/><br/>2. 打好基礎概念<br/><br/>    變數和數據類型：了解不同類型數據的存儲和操作方式。<br/>    控制結構：如條件語句(if-else)和循環(for, while)。<br/>    函數：學會如何定義和調用函數，提高代碼重用性。<br/><br/>3. 理解數據結構和算法<br/><br/>    基本數據結構：如陣列、鏈結串列、堆疊、佇列等。<br/>    常見算法：如排序、搜索算法，這些都是解決複雜問題的基礎。<br/><br/>4. 多做練習<br/><br/>    編程題目：如LeetCode、HackerRank等網站上的練習題。<br/>    實際項目：嘗試參與簡單的項目或課程作業，應用所學知識。<br/><br/>5. 理解機械設計與編程的結合<br/><br/>    CAD軟體插件：學習如何用編程來擴展CAD軟體功能。<br/>    模擬和分析工具：如MATLAB，用於數據分析和模擬。<br/><br/>6. 保持好奇心和耐心<br/><br/>    持續學習：編程是一門不斷發展的技術，保持對新技術的好奇心。<br/>    解決問題：學會從錯誤中學習，每次Debug都是一次成長的機會。<br/><br/>7. 參與學習社群<br/><br/>    線上論壇：如Stack Overflow，獲取幫助和資源。<br/>    學校社團：參與校內相關的編程或工程設計社團，增加實踐機會。<br/><br/>8. 管理好學習時間<br/><br/>    制定計劃：安排好學習進度，每天或每週都有固定的編程時間。<br/>    勞逸結合：合理安排休息時間，保持身心健康。<br/><br/>9. 掌握基礎工具<br/><br/>    編輯器和IDE：如VS Code, PyCharm等，選擇一個適合自己的開發環境。<br/>    版本控制：學習使用Git，便於代碼管理和協作。<br/><br/>10. 不斷提升<br/><br/>    參加競賽：如編程競賽或機械設計比賽，提升自己的實力。<br/>    實習經驗：嘗試找實習或參與實際項目，積累工作經驗。</p>
<p><span style="background-color: #ccffcc;">接下來請一律使用中文繁體用語回答, 請就"Python：簡單易學，語法直觀，適合初學者。" 仔細說明緣由,  Python 對機械設計領域有何用處, 並且舉出實例, 而且列出範例原始碼說明</span>.</p>
<p style="padding-left: 30px;">Python：簡單易學，語法直觀，適合初學者的緣由:</p>
<p style="padding-left: 30px;">緣由說明</p>
<p style="padding-left: 30px;">語法簡單明瞭：Python的語法設計注重可讀性，使用縮排來表示程式塊，而非繁瑣的括號或關鍵字，使代碼結構清晰易懂。</p>
<p style="padding-left: 30px;">動態類型語言：變數在使用前無需宣告類型，簡化了代碼撰寫和維護過程。</p>
<p style="padding-left: 30px;">豐富的標準庫：Python擁有大量的標準庫和第三方庫，涵蓋了網路、檔案處理、數據分析、機器學習等多方面功能，初學者可以方便地使用這些庫來完成複雜的任務。</p>
<p style="padding-left: 30px;">龐大的社群支持：Python社群活躍，有大量的學習資源、教程和範例代碼，初學者遇到問題時可以輕鬆找到幫助。<br/><br/>Python對機械設計領域的用處</p>
<p style="padding-left: 30px;">用途說明</p>
<p style="padding-left: 30px;">自動化任務：Python可以用來自動化重複性工作，如文件處理、數據轉換、報告生成等，節省時間和提高效率</p>
<p style="padding-left: 30px;">數據分析與可視化：利用 Python 的數據分析和可視化庫（如 Pandas、Matplotlib、Seaborn），可以輕鬆地進行數據處理、分析和圖表繪製，輔助設計決策。</p>
<p style="padding-left: 30px;">CAD軟體插件開發：Python可用於開發 CAD 軟體（如 AutoCAD、SolidWorks）的插件，擴展其功能，實現定制化的設計需求。</p>
<p style="padding-left: 30px;">數值計算與模擬：使用 NumPy、SciPy 等科學計算庫，可以進行複雜的數值計算和模擬，解決工程中的數學問題。<br/><br/>實例與範例原始碼</p>
<p style="padding-left: 30px;">實例一：數據分析與可視化</p>
<p style="padding-left: 30px;">假設我們有一組機械零件的測量數據，需分析其尺寸分佈情況。</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

# 創建假設的數據集
data = {
    '零件編號': ['A', 'B', 'C', 'D', 'E'],
    '長度(mm)': [50.5, 49.8, 50.1, 50.0, 49.9],
    '寬度(mm)': [20.2, 20.0, 20.3, 20.1, 20.2]
}
df = pd.DataFrame(data)

# 數據分析
mean_length = df['長度(mm)'].mean()
mean_width = df['寬度(mm)'].mean()

print(f'平均長度: {mean_length} mm')
print(f'平均寬度: {mean_width} mm')

# 數據可視化
plt.figure(figsize=(10, 5))
sns.barplot(x='零件編號', y='長度(mm)', data=df)
plt.title('零件長度分佈')
plt.show()
</pre>
<p>這段代碼創建了一個假設的機械零件測量數據集，並計算其平均長度和寬度，最後使用 Seaborn 程式庫生成長度分佈圖。</p>
<p>計算機械零件測量數據的平均長度和寬度，以及生成長度分佈圖，可以在機械設計和製造過程中有多種用途：</p>
<p style="padding-left: 30px;">1. 質量控制與檢驗<br/><br/>在生產過程中，測量零件的尺寸並計算其平均值和分佈情況，有助於確認產品是否符合設計規範和質量標準。若有偏差，可以及時調整製造工藝，減少次品率。</p>
<p style="padding-left: 30px;">2. 設計改進<br/><br/>分析零件的實際尺寸數據，可以幫助工程師了解製造過程中的偏差，從而改進設計，提高產品的精度和可靠性。</p>
<p style="padding-left: 30px;">3. 統計分析<br/><br/>透過統計分析零件的測量數據，工程師可以識別出生產中的異常情況，如機器故障或操作問題，並採取相應措施進行修正。</p>
<p style="padding-left: 30px;">4. 預測與決策支持<br/><br/>統計數據可以作為製造過程中決策支持的依據，例如調整加工參數、預測壽命、安排維護等。</p>
<p style="padding-left: 30px;">5. 供應鏈管理<br/><br/>了解零件的尺寸分佈，可以幫助企業在供應鏈管理中進行更好的採購和庫存管理，確保供應鏈的穩定性和高效性。</p>
<p>了解零件的尺寸分佈可以在供應鏈管理中提供多方面的幫助，進行更好的採購和庫存管理的原因如下：</p>
<p style="padding-left: 30px;">1. 確保品質穩定<br/><br/>了解零件的尺寸分佈可以確保所採購的零件符合設計規格和品質標準。若尺寸分佈出現較大偏差，可以及時與供應商溝通，確保產品質量穩定，避免因不合格零件導致的生產問題。</p>
<p style="padding-left: 30px;">2. 減少庫存成本<br/><br/>精確的尺寸數據可以幫助企業更準確地預測零件的需求，避免因過度採購導致的庫存積壓，或因庫存不足而影響生產。這有助於降低庫存成本，提高資金利用效率。</p>
<p style="padding-left: 30px;">3. 提高生產效率<br/><br/>了解零件的尺寸分佈可以及早發現可能的質量問題，從而及時調整生產計劃，避免因不合格零件進入生產線而引發的停工或返工問題，提升生產效率。</p>
<p style="padding-left: 30px;">4. 優化供應鏈合作<br/><br/>透過分析零件尺寸分佈，企業可以與供應商合作進行質量改進，提升整體供應鏈的運營效率。透明的數據交流有助於建立更好的合作關係，達到雙贏效果。</p>
<p style="padding-left: 30px;">5. 制定採購策略<br/><br/>根據零件尺寸分佈情況，企業可以制定更精確的採購策略。例如，若某一批次的零件尺寸分佈較為穩定，企業可以考慮與該供應商加強合作，進行批量採購，從而獲得更好的價格優惠。</p>
<p style="padding-left: 30px;">6. 風險管理<br/><br/>了解零件的尺寸分佈還可以幫助企業識別供應鏈中的潛在風險，及早制定應對策略。例如，如果發現某供應商的零件尺寸波動較大，可以考慮尋找備選供應商，以減少供應風險。</p>
<p style="padding-left: 30px;">具體範例說明<br/><br/>假設一家公司需要採購大量的螺栓進行組裝，並且這些螺栓的尺寸需要非常精確才能保證產品的可靠性。公司可以通過以下步驟進行供應鏈管理：<br/><br/>1. 數據收集與分析</p>
<p style="padding-left: 30px;">公司定期收集每批次螺栓的尺寸數據，並使用 Python 進行分析和可視化，了解螺栓的尺寸分佈情況。<br/><br/>2. 品質控制</p>
<p style="padding-left: 30px;">如果某一批次的螺栓尺寸分佈偏離設計規格，公司可以立即通知供應商，要求進行改進，並且可以拒收不合格的產品，確保進入生產線的零件都符合標準。<br/><br/>3. 庫存管理</p>
<p style="padding-left: 30px;">通過分析歷史數據，公司可以預測未來的螺栓需求，合理安排採購計劃，避免庫存積壓或短缺。例如，如果某些時間段的需求量較大，公司可以提前增加庫存，平衡供需。<br/><br/>4. 供應商評估</p>
<p style="padding-left: 30px;">根據每個供應商提供螺栓的尺寸穩定性和合格率，公司可以進行供應商評估，選擇優質供應商，建立長期合作關係，同時淘汰質量不穩定的供應商。</p>
<h1>Topics</h1>
<h4>Topic 1: 基於瀏覽器的分散式版次管理與整合程式開發環境 (10%)<span style="background-color: #ffff99;"><br/></span></h4>
<p style="padding-left: 30px;">USB 隨身碟:</p>
<p style="padding-left: 60px;">下載 <a href="http://229.cycu.org/python_2025_lite.7z">python_2025_lite.7z</a> (428 MB, 解開壓縮後約 1.5 GB)</p>
<p style="padding-left: 30px;"><a href="https://mde.tw/cp2024/content/Jupyter.html">Jupyter</a></p>
<p style="padding-left: 30px;">What are Github and Codespaces?</p>
<p style="padding-left: 60px;"><a href="https://docs.github.com/en/get-started/start-your-journey/hello-world">Hello World - GitHub Docs</a></p>
<p style="padding-left: 30px;">利用包含學號的字串作為帳號, 申請免費使用 Github.</p>
<p style="padding-left: 30px;">Python 課程教材: <a href="https://www.learnpythonwithjupyter.com/">https://www.learnpythonwithjupyter.com/</a> - PART 1</p>
<h4>Topic 2: Python 的數列、判斷式與重複迴圈 (20%)<span style="background-color: #ffff99;"><br/></span></h4>
<p style="padding-left: 30px;">Python 課程教材: <a href="https://www.learnpythonwithjupyter.com/">https://www.learnpythonwithjupyter.com/</a> - PART 2 and Part 3</p>
<h4>Topic 3: Python 的數字、演算法與迴圈 (20%)</h4>
<p style="padding-left: 30px;">Python 課程教材: <a href="https://www.learnpythonwithjupyter.com/">https://www.learnpythonwithjupyter.com/</a> - PART 4 and Part 5</p>
<h4>Topic 4: 利用 Python 控制機電模擬系統 (20%)</h4>
<p style="padding-left: 30px;">利用 <a href="https://solvespace.com/">https://solvespace.com/</a> 建立機械系統零組件</p>
<p style="padding-left: 30px;">利用 <a href="https://www.coppeliarobotics.com/">CoppeliaSim</a> 建立機電模擬系統</p>
<p style="padding-left: 30px;">利用 <a href="https://manual.coppeliarobotics.com/en/zmqRemoteApiOverview.htm">Python</a> 跨網路控制瀏覽器上的機電模擬系統</p>
<h4>Final Report: 期末口頭與書面專題報告 (20%)</h4>
<h2>Repository</h2>
<p>計算機程式課程中的作業將透過 Github Classroom 派送, 使用者必須登入 Github 後, 透過作業連結取得倉儲, 而此倉儲帶有採 Python Flask 框架所編寫的內容管理系統, 使用者可以利用 Github Codespaces 或近端的可攜程式套件進行網頁、網誌以及簡報檔的編輯與管理.</p>
<p>採 Github Codespaces 維護作業網站內容:</p>
<ol>
<li>使用<a href="https://github.com/pricing">免費方案</a>時, 必須了解相關限制</li>
<li>使用 2 cores 的虛擬機器, 每個月只能使用 60 小時</li>
<li>系統採用 Visual Studio Code, 支援多個終端機, 操作指令為 Linux</li>
<li>由作業倉儲端進入 Codespaces 介面, 使用者無需設定倉儲管理權限</li>
<li>執行倉儲的動態網站後, 可在分組團隊間協同管理網站內容</li>
<li>動態網站網址採亂數設定, 使用者無需修改網站的管理密碼 (內建為 admin)</li>
</ol>
<p>採近端可攜程式環境維護網站內容:</p>
<ol>
<li>可以在任何連網的 64 位元 Windows 操作系統中使用</li>
<li>可以透過 Token 或 SSH 設定, 取得作業倉儲的管理權限</li>
<li>若採用電腦的外部 IP 位址啟動, 執行倉儲後的動態網站, 必須修改管理密碼</li>
</ol>
<p>操作影片 Demo:</p>
<h2>Topic 1</h2>
<h4>基於瀏覽器的分散式版次管理與整合程式開發環境 (10%)<span style="background-color: #ffff99;"><br/></span></h4>
<p style="padding-left: 30px;">USB 隨身碟:</p>
<p style="padding-left: 60px;">下載 <a href="http://229.cycu.org/python_2025_lite.7z">python_2025_lite.7z</a> (428 MB, 解開壓縮後約 1.5 GB)</p>
<p style="padding-left: 30px;"><a href="https://mde.tw/cp2024/content/Jupyter.html">Jupyter</a></p>
<p style="padding-left: 30px;">What are Github and Codespaces?</p>
<p style="padding-left: 60px;"><a href="https://docs.github.com/en/get-started/start-your-journey/hello-world">Hello World - GitHub Docs</a></p>
<p style="padding-left: 30px;">利用包含學號的字串作為帳號, 申請免費使用 Github.</p>
<p style="padding-left: 30px;">Python 課程教材: <a href="https://www.learnpythonwithjupyter.com/">https://www.learnpythonwithjupyter.com/</a> - PART 1</p>
<p><span>參考資料:</span></p>
<p style="padding-left: 30px;"><a href="https://www.youtube.com/@-kmolab9376/videos">https://www.youtube.com/@-kmolab9376/videos</a></p>
<h3>上課內容</h3>
<p>1b w1</p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" height="315" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/n95FYV0uUg0?si=S_s-Jt0N-pVUtD0S" title="YouTube video player" width="560"></iframe></p>
<p>作業 template: <a href="https://mde.tw/cp2024_hw">https://mde.tw/cp2024_hw</a> </p>
<p>必備:</p>
<p style="padding-left: 30px;">耳機</p>
<p style="padding-left: 30px;">usb 隨身碟 (3.0 以上, 32 gb 以上)</p>
<p>使用者必須參考 <a href="https://mde.tw/cp2024/content/Office365.html">https://mde.tw/cp2024/content/Office365.html</a> 完成:</p>
<p style="padding-left: 30px;">登入 MS Teams 後透過<span>團隊代碼: </span><span class="fui-Text ___vec8h90 fk6fouc f1pbo8a8 f1i3iumi figsok6 fpgzoln f1w7gpdv f6juhto f1mtd64y f1y7q3j9 f2jf649 foxqkq2" data-tid="join-team-code">ldodwua 進入上課畫面</span></p>
<p style="padding-left: 30px;"><span class="fui-Text ___vec8h90 fk6fouc f1pbo8a8 f1i3iumi figsok6 fpgzoln f1w7gpdv f6juhto f1mtd64y f1y7q3j9 f2jf649 foxqkq2" data-tid="join-team-code">設法利用學號或帶有學號的字串, 作為<a href="https://github.com/join">申請 Github</a> 的帳號.</span></p>
<p><span class="fui-Text ___vec8h90 fk6fouc f1pbo8a8 f1i3iumi figsok6 fpgzoln f1w7gpdv f6juhto f1mtd64y f1y7q3j9 f2jf649 foxqkq2" data-tid="join-team-code">下週將透過 <a href="https://classroom.github.com/">Github Classroom</a> 派送作業倉儲, 使用者必須完成 Github 帳號中的兩段式認證, 若希望使用手錶認證, 可以使用 <a href="https://authy.com/">Authy app</a>.</span></p><h2>Topic 2</h2>
<h4>Python 的數列、判斷式與重複迴圈 (20%)<span style="background-color: #ffff99;"><br/></span></h4>
<p style="padding-left: 30px;">Python 課程教材: <a href="https://www.learnpythonwithjupyter.com/">https://www.learnpythonwithjupyter.com/</a> - PART 2 and Part 3</p>
<p></p>
<h2>Topic 3</h2>
<h4>Python 的數字、演算法與迴圈 (20%)</h4>
<p style="padding-left: 30px;">Python 課程教材: <a href="https://www.learnpythonwithjupyter.com/">https://www.learnpythonwithjupyter.com/</a> - PART 4 and Part 5</p>
<p></p>
<h2>Topic 4</h2>
<h4>利用 Python 控制機電模擬系統 (20%)</h4>
<p style="padding-left: 30px;">利用 <a href="https://solvespace.com/">https://solvespace.com/</a> 建立機械系統零組件</p>
<p style="padding-left: 30px;">利用 <a href="https://www.coppeliarobotics.com/">CoppeliaSim</a> 建立機電模擬系統</p>
<p style="padding-left: 30px;">利用 <a href="https://manual.coppeliarobotics.com/en/zmqRemoteApiOverview.htm">Python</a> 跨網路控制瀏覽器上的機電模擬系統</p>
<p><a href="/downloads/cd2023_pj3ag4_zmq_football_4.7.7z">cd2023_pj3ag4_zmq_football_4.7.7z</a></p>
<p><a href="/downloads/cd2024_2b_g6_steel_ball_platform_nxopen_copsim.7z">cd2024_2b_g6_steel_ball_platform_nxopen_copsim.7z</a></p><h1>CAD</h1>
<h4>Solvespace</h4>
<p style="padding-left: 30px;"><a href="https://solvespace.com/">https://solvespace.com/</a> </p>
<h4>NX</h4>
<p style="padding-left: 30px;"><a href="https://plm.sw.siemens.com/en-US/nx/">https://plm.sw.siemens.com/en-US/nx/</a> </p>
<p style="padding-left: 30px;">NXOpen in Python</p>
<p style="padding-left: 30px;"><a href="/downloads/cd2024_2b_g6_steel_ball_platform_nxopen_copsim.7z">cd2024_2b_g6_steel_ball_platform_nxopen_copsim.7z</a></p>
<h4>CoppeliaSim</h4>
<p style="padding-left: 30px;"><a href="/downloads/cd2023_pj3ag4_zmq_football_4.7.7z">cd2023_pj3ag4_zmq_football_4.7.7z</a></p>
<p style="padding-left: 30px;"><a href="/downloads/cad2024_foosball_with_ball_python_script.7z">cad2024_foosball_with_ball_python_script.7z</a></p>
<h4></h4><h2>CoppeliaSim</h2>
<p>下載相容於 IPv6 的 CoppeliaSim 4.7.0 rev4: <a href="http://229.cycu.org/CoppeliaSim_Edu_4.7.0_rev4_for_2024Fall.7z">CoppeliaSim_Edu_4.7.0_rev4_for_2024Fall.7z</a>, 已經內建於 <a href="http://229.cycu.org/python_2025_lite.7z">python_2025_lite.7z</a> (428 MB, 解開壓縮後約 1.5 GB)</p>
<p><a href="https://manual.coppeliarobotics.com/en/versionInfo.htm">https://manual.coppeliarobotics.com/en/versionInfo.htm</a></p>
<p>user settings file is C:\Users\%USERNAME%\AppData\Roaming/CoppeliaSim/usrset.txt</p>
<p>CoppeliaSim 4.5.1 與 4.7.1 使用 ZMQ RemoteAPI Python 程式的差異:</p>
<ol>
<li>zmqRemoteApi 模組名稱改為 coppeliasim_zmqremoteapi_client</li>
<li>sim 物件中的 sim.setJointForce() 方法已經失效, 必須改用 sim.setJointTargetForce()</li>
</ol>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false"># zmqRemoteApi_IPv6 為將 zmq 通訊協定修改為 IPv4 與 IPv6 相容
# pip install pyzmq cbor keyboard
# for 4.5.1
#from zmqRemoteApi_IPv6 import RemoteAPIClient
# for 4.7.1
from coppeliasim_zmqremoteapi_client import RemoteAPIClient
import time
import math
import keyboard

# 利用 zmqRemoteAPI 以 23000 對場景伺服器進行連線
client = RemoteAPIClient('localhost', 23000)
# 以 getObject 方法取得場景物件
sim = client.getObject('sim')
box = sim.getObject('/box')

# 啟動模擬
sim.startSimulation()
# 建立尺寸數列, 分別定義 x, y, z 方向尺寸
x = 0.2
y = 0.2
z = 0.1
size = [x, y, z]

# 利用 size 數列, 建立圓柱物件, 2 代表 cylinder
# 8 表示 respondable, 1 為 質量
digit1_handle = sim.createPureShape(2, 8, size, 1, None)
# 將圓柱物件命名為 digit1, 若用於機械計分可做為個位數轉盤
# 之後可再導入帶有數字組立的外型零件
sim.setObjectAlias(digit1_handle, 'digit1')
# 轉角單位為徑度
sim.setObjectOrientation(digit1_handle, -1, [0, math.pi/2, 0])
# 起始物件中心位於 [0, 0, 0], 為了位於地板, 往 z 提升一個半徑高度
sim.setObjectPosition(digit1_handle, -1, [0, 0, x/2])

# 建立 revolute joint 命名為 joint, 且將 joint mode 設為 dynamic, control mode 設為 velocity
joint1_handle = sim.createJoint(sim.joint_revolute_subtype, sim.jointmode_dynamic, 0, None)
sim.setObjectInt32Param(joint1_handle, sim.jointintparam_dynctrlmode, sim.jointdynctrl_velocity)
sim.setObjectAlias(joint1_handle, 'joint1')

# 取得 cylinder 的位置座標
digit1_pos = sim.getObjectPosition(digit1_handle, -1)
joint1_pos = [digit1_pos[0], digit1_pos[1], digit1_pos[2]]

# 將 joint1 至於 cylinder 中心
sim.setObjectPosition(joint1_handle, -1, joint1_pos)
# 取得 digit1_handle 的方位
digit1_ori = sim.getObjectOrientation(digit1_handle, -1)
# 將 joint1_handle 方位與 digit1 對齊
sim.setObjectOrientation(joint1_handle, -1, digit1_ori)

# 將 joint1 置於 box 上
sim.setObjectParent(joint1_handle, box, True)
# 將 cylinder 置於 joint1 上
sim.setObjectParent(digit1_handle, joint1_handle, True)

# 鎖定 joint1
# for 4.5.1
#sim.setJointForce(joint1_handle, float('inf'))
# for 4.7.1
sim.setJointTargetForce(joint1_handle, float('inf'))

print("基本場景建立完成!")

# 設定主迴圈
while True:
    # 設定 joint1 目標速度
    sim.setJointTargetVelocity(joint1_handle, 10)
    # 讓 coppeliasim 有時間按照設定讓 joint1 旋轉
    time.sleep(0.01) 

    if keyboard.is_pressed('q'):
        # 可以按下 q 鍵跳出重複執行迴圈
        break

# 終止模擬
sim.stopSimulation()

</pre>
<p></p>
<h1>Python</h1>
<p>Python 執行環境</p>
<p style="padding-left: 30px;">Brython (全球資訊網上的 Python)</p>
<p style="padding-left: 30px;">Github Codespaces</p>
<p style="padding-left: 30px;">Windows 操作系統</p>
<p style="padding-left: 60px;">制式安裝 (VSCode and SciTE)</p>
<p style="padding-left: 60px;">可攜設定 (VSCode and SciTE)</p>
<p style="padding-left: 30px;">USB 隨身碟:</p>
<p style="padding-left: 60px;">下載 <a href="http://229.cycu.org/python_2025_lite.7z">python_2025_lite.7z</a> (428 MB, 解開壓縮後約 1.5 GB)</p>
<p style="padding-left: 60px;"><a href="http://229.cycu.org/kmolab_ex.7z">kmolab_ex.7z</a> (314MB)</p>
<p style="padding-left: 30px;">Ubuntu 操作系統</p>
<p><a href="https://docs.python.org/zh-tw/3/library/stdtypes.html">Types</a>: Integers, Floats, Strings and Booleans</p>
<p>Type Conversion</p>
<p>Variables and Assignment</p>
<p>Arithmetic Operators</p>
<p>Comparison Operators</p>
<p>Logical Operators</p>
<p>Conditional Statements (if, elif, else)</p>
<p>Loops (for, while)</p>
<p>break, continue and pass</p>
<p>Lists</p>
<p>Tuples</p>
<p>Sets</p>
<p>Dictionaries</p>
<p>Defining and Calling Functions</p>
<p>Arguments and Return Values</p>
<p>Local and Global Variables</p>
<p>Importing <a href="https://docs.python.org/zh-tw/3/tutorial/modules.html">Modules</a></p>
<p><a href="https://docs.python.org/zh-tw/3/library/index.html">Standard Library</a></p>
<p><a href="https://github.com/TheAlgorithms/Python">https://github.com/TheAlgorithms/Python</a> </p>
<p><a href="/downloads/nxopen_base_and_center_pole_python.txt">nxopen_base_and_center_pole_python.txt</a></p>
<h4>qrcode</h4>
<p><a href="https://en.wikipedia.org/wiki/QR_code">https://en.wikipedia.org/wiki/QR_code</a></p>
<p><a href="https://www.funcode-tech.com/QR_app.html">https://www.funcode-tech.com/QR_app.html</a></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false"># pip install qrcode matplotlib
import qrcode
import matplotlib.pyplot as plt
import matplotlib.image as mpimg
#img=qrcode.make('20240101;5745632912;Steel;---;---')
img=qrcode.make('虎尾科大機械設計工程系')
img.save('qrcode_ex1.png')
img = mpimg.imread('qrcode_ex1.png')
plt.imshow(img)
plt.show()</pre>
<h4>pdf</h4>
<p>pip install pypdf2</p>
<p>split pdf file:</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false"># pypdf2_split.py
import os
from PyPDF2 import PdfWriter, PdfReader

pdfReader = PdfReader(open("Learn_Autodesk_Inventor_2018_Basics.pdf", "rb"))
information = [("inventor",18,45)]
 
for page in range(len(information)):
    pdf_writer = PdfWriter()
    start = information[page][1]
    end = information[page][2]
    while start&lt;=end:
        pdf_writer.add_page(pdfReader.pages[start-1])
        start+=1
    if not os.path.exists("./"):
        os.makedirs(savepath)
    output_filename = '{}_{}_page_{}.pdf'.format(information[page][0],information[page][1], information[page][2])
    with open(output_filename,'wb') as out:
        pdf_writer.write(out)
print("已經完成 pdf 切割與存檔")</pre>
<p>combine pdf file:</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">import os
from PyPDF2 import PdfWriter, PdfReader

pdf_write_object = PdfWriter()

pdfFileNames = ["inventor1.pdf", "inventor2.pdf"]
newFileName = "inventor"
filenameString = ""

for filename in pdfFileNames:
    pdf_read_object = PdfReader(open(filename, "rb"))
    filenameString += filename + ", "
    for page in range(len(pdf_read_object.pages)):
        pdf_write_object.add_page(pdf_read_object.pages[page])
 
final_file_object = open(newFileName + ".pdf", 'wb')
pdf_write_object.write(final_file_object)
final_file_object.close()

print("已經將 " + filenameString+ " 合併為: "+ newFileName + ".pdf")
</pre>
<h4>Pelican Blog md generator</h4>
<p><a href="https://github.com/mdecycu/pelican_md_generator">https://github.com/mdecycu/pelican_md_generator</a></p>
<h4>NXOpen Python</h4>
<p>機械設計工程師若能夠看得懂 <a href="/downloads/nxopen_base_and_center_pole_python.txt">nxopen_base_and_center_pole_python.txt</a>, 是否能夠將程式碼改寫為 Function 或 Class 架構, 以方便用程式方法建立機電系統設計中的參數式零組件?</p>
<h4>ZMQ remote API Python for CoppeliaSim</h4>
<p>可遠端透過 Python 程式控制機電模擬系統的 <a href="/downloads/cd2023_pj3ag4_zmq_football4.7z">cd2023_pj3ag4_zmq_football4.7z</a>, 則牽涉 ZMQ、IPv4、IPv6 與 <a href="https://docs.python.org/zh-tw/3/library/asyncio.html">asyncio</a> 模組.</p>
<h4>Python for Webots</h4>
<p>Python 程式也能用來控制 Webots 機電模擬系統: <a href="https://cyberbotics.com/doc/guide/using-python">https://cyberbotics.com/doc/guide/using-python</a></p>
<h4>Python 與 CAD 有關的其他應用</h4>
<p><a href="https://pypi.org/project/python-solvespace/">https://pypi.org/project/python-solvespace/</a></p>
<p><a href="https://github.com/jimy-byerley/pymadcad">https://github.com/jimy-byerley/pymadcad</a></p>
<h1>Project</h1>
<p>已知:</p>
<ol>
<li>修課學員經由 @nfu.edu.tw 網域, 可利用"學號@nfu.edu.tw"經由 <a href="https://login.microsoftonline.com/">https://login.microsoftonline.com/</a> 登入 MS 365.</li>
<li>登入後, 使用者可以利用"<a href="https://portal.azure.com/#view/Microsoft_AAD_RegisteredApps/ApplicationsListBlade">應用程式註冊</a>"建立應用程式</li>
<li>所註冊的延伸應用程式則可以利用 Microsoft Online 主機所提供的 OAuth2 API 程式庫, 取得登入者的 profile</li>
<li>經由上列步驟取得登入者的 profile 後, 延伸應用程式可設法讀取課程學員的作業倉儲與網站連結</li>
<li>當每一階段的學員作業網頁完成後, 若再經由亂數方法, 隨機分配給每一位學員 10 個除自己以外的學員作業網站進行評分, 即可根據既定的評分基準完成自評</li>
<li>隨機分配的學員作業網址可利用 email 寄出, 而評分回報則可利用 MS 365 的 Forms 表單取回</li>
</ol>
<p>以下為上列流程的 step 1 測試程式 (<a href="/downloads/teams_oauth2_flask_py.txt">teams_oauth2_flask_py.txt</a>):</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">from flask import Flask, redirect, request, session, url_for
import requests
import json

app = Flask(__name__)
app.secret_key = 'your_secret_key'  # 用於 Flask session 的秘密金鑰

# 替換成你的 Azure AD 應用程式資訊
'''
CLIENT_ID 為"應用程式 (用戶端) 識別碼"
CLIENT_SECRET 則為"憑證及秘密"中"用戶端密碼"的"值"
'''
CLIENT_ID = 'id'
CLIENT_SECRET = 'secret'
TENANT_ID = 'id'
AUTHORITY = f'https://login.microsoftonline.com/{TENANT_ID}'
REDIRECT_URI = 'http://localhost:8000/callback'
SCOPE = 'User.Read'

# 用於登錄和取得授權碼
@app.route('/')
def index():
    auth_url = (f'{AUTHORITY}/oauth2/v2.0/authorize'
                f'?client_id={CLIENT_ID}'
                f'&amp;response_type=code'
                f'&amp;redirect_uri={REDIRECT_URI}'
                f'&amp;response_mode=query'
                f'&amp;scope={SCOPE}')
    return redirect(auth_url)

# 處理回調和交換授權碼
@app.route('/callback')
def callback():
    code = request.args.get('code')
    token_url = f'{AUTHORITY}/oauth2/v2.0/token'
    token_data = {
        'grant_type': 'authorization_code',
        'code': code,
        'redirect_uri': REDIRECT_URI,
        'client_id': CLIENT_ID,
        'client_secret': CLIENT_SECRET,
        'scope': SCOPE
    }
    token_r = requests.post(token_url, data=token_data)
    token_r.raise_for_status()
    tokens = token_r.json()
    session['access_token'] = tokens['access_token']
    return redirect(url_for('profile'))

# 使用訪問令牌呼叫 Microsoft Graph API 來獲取用戶資料
@app.route('/profile')
def profile():
    access_token = session.get('access_token')
    if not access_token:
        return redirect(url_for('index'))

    headers = {
        'Authorization': f'Bearer {access_token}',
        'Content-Type': 'application/json'
    }
    graph_url = 'https://graph.microsoft.com/v1.0/me'
    graph_r = requests.get(graph_url, headers=headers)
    graph_r.raise_for_status()
    user_info = graph_r.json()
    user_email = str(user_info["mail"])
    user_id = user_email.split("@")[0]
    session["user_id"] = user_id
    # 登出 MS Online 並重定向回首頁
    # 返回 HTML 及 JavaScript 以進行自動登出
    return (f'Hello, {user_id} &lt;br&gt;'
            f'&lt;script type="text/javascript"&gt;'
            f'  window.location = "https://login.microsoftonline.com/common/oauth2/v2.0/logout";'
            f'&lt;/script&gt;')

@app.route('/userid')
def userid():
    return session["user_id"]
    

# 登出功能
@app.route('/logout')
def logout():
    # 清除 session 中的訪問令牌
    session.pop('access_token', None)
    # 重定向到 MS Online 登出 URL
    return redirect('https://login.microsoftonline.com/common/oauth2/v2.0/logout')

if __name__ == '__main__':
    app.run(debug=True, port=8000)
</pre>
<p>以下則為寄信範例:</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">import requests
import json

# 替換為你的應用程式資訊
CLIENT_ID = 'your_client_id'
CLIENT_SECRET = 'your_client_secret'
TENANT_ID = 'your_tenant_id'
AUTHORITY = f'https://login.microsoftonline.com/{TENANT_ID}'
TOKEN_URL = f'{AUTHORITY}/oauth2/v2.0/token'
SCOPE = 'https://graph.microsoft.com/.default'

# 獲取 OAuth2 訪問令牌
def get_access_token():
    token_data = {
        'grant_type': 'client_credentials',
        'client_id': CLIENT_ID,
        'client_secret': CLIENT_SECRET,
        'scope': SCOPE
    }
    token_r = requests.post(TOKEN_URL, data=token_data)
    token_r.raise_for_status()
    tokens = token_r.json()
    return tokens['access_token']

# 發送電子郵件
def send_email(access_token, to_address, subject, body):
    headers = {
        'Authorization': f'Bearer {access_token}',
        'Content-Type': 'application/json'
    }
    email_data = {
        "message": {
            "subject": subject,
            "body": {
                "contentType": "Text",
                "content": body
            },
            "toRecipients": [
                {
                    "emailAddress": {
                        "address": to_address
                    }
                }
            ]
        },
        "saveToSentItems": "true"
    }
    email_url = 'https://graph.microsoft.com/v1.0/me/sendMail'
    response = requests.post(email_url, headers=headers, json=email_data)
    response.raise_for_status()
    print("Email sent successfully!")

if __name__ == "__main__":
    token = get_access_token()
    send_email(token, 'recipient@example.com', 'Test Subject', 'This is the email body.')
</pre>
<hr/>
<p>以下利用 ChatGPT 4omini 進行對話:</p>
<p>問:</p>
<p data-pm-slice="0 0 []" style="padding-left: 30px;">使用 python + flask 開發一個簡單的資料庫程式, 並使用 SQLite, 目前表單有使用者學號以及其 github 帳號, 還有一個備註欄位, 只需要 add, query, update 與 delete 功能, 該如何進行?</p>
<p data-pm-slice="0 0 []">答:</p>
<p data-pm-slice="0 0 []" style="padding-left: 30px;">1. 安裝 Flask 和 SQLite<br/><br/>首先，確保你已經安裝了 Flask 和 SQLite。如果你還沒有安裝，請使用以下命令：</p>
<pre class="brush:js;auto-links:false;toolbar:false" contenteditable="false">pip install Flask
</pre>
<p data-pm-slice="0 0 []" style="padding-left: 30px;">SQLite 通常已經隨 Python 安裝，不需要額外安裝。如果你需要 SQLite 的 Python 模組，可以使用以下命令：</p>
<pre class="brush:js;auto-links:false;toolbar:false" contenteditable="false">pip install sqlite3
</pre>
<p data-pm-slice="0 0 []" style="padding-left: 30px;">2. 建立 Flask 應用程式</p>
<p data-pm-slice="0 0 []" style="padding-left: 30px;">應用程式結構</p>
<pre class="brush:js;auto-links:false;toolbar:false" contenteditable="false">flask_app/
│
├── app.py
├── schema.sql
└── templates/
    ├── index.html
    ├── add.html
    ├── update.html
    └── query.html
</pre>
<p data-pm-slice="0 0 []" style="padding-left: 30px;">schema.sql — 定義 SQLite 資料表<br/><br/>在 schema.sql 文件中，定義 SQLite 資料表結構：</p>
<pre class="brush:js;auto-links:false;toolbar:false" contenteditable="false">CREATE TABLE IF NOT EXISTS users (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    student_id TEXT NOT NULL UNIQUE,
    github_account TEXT NOT NULL,
    notes TEXT
);
</pre>
<p data-pm-slice="0 0 []" style="padding-left: 30px;">app.py — Flask 應用程式<br/><br/>在 app.py 中，設置 Flask 應用程式並建立 CRUD 功能：</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">from flask import Flask, request, redirect, url_for, render_template
import sqlite3

app = Flask(__name__)

DATABASE = 'database.db'

def get_db():
    conn = sqlite3.connect(DATABASE)
    conn.row_factory = sqlite3.Row
    return conn

def init_db():
    with app.app_context():
        db = get_db()
        with open('schema.sql', 'r') as f:
            db.executescript(f.read())
        db.commit()

@app.route('/')
def index():
    return render_template('index.html')

@app.route('/add', methods=['GET', 'POST'])
def add_user():
    if request.method == 'POST':
        student_id = request.form['student_id']
        github_account = request.form['github_account']
        notes = request.form.get('notes', '')

        db = get_db()
        db.execute('INSERT INTO users (student_id, github_account, notes) VALUES (?, ?, ?)',
                   (student_id, github_account, notes))
        db.commit()
        return redirect(url_for('index'))

    return render_template('add.html')

@app.route('/update/&lt;int:user_id&gt;', methods=['GET', 'POST'])
def update_user(user_id):
    db = get_db()
    if request.method == 'POST':
        student_id = request.form['student_id']
        github_account = request.form['github_account']
        notes = request.form.get('notes', '')

        db.execute('UPDATE users SET student_id = ?, github_account = ?, notes = ? WHERE id = ?',
                   (student_id, github_account, notes, user_id))
        db.commit()
        return redirect(url_for('index'))

    user = db.execute('SELECT * FROM users WHERE id = ?', (user_id,)).fetchone()
    return render_template('update.html', user=user)

@app.route('/delete/&lt;int:user_id&gt;')
def delete_user(user_id):
    db = get_db()
    db.execute('DELETE FROM users WHERE id = ?', (user_id,))
    db.commit()
    return redirect(url_for('index'))

@app.route('/query')
def query_users():
    db = get_db()
    users = db.execute('SELECT * FROM users').fetchall()
    return render_template('query.html', users=users)

if __name__ == '__main__':
    init_db()
    app.run(debug=True)
</pre>
<p data-pm-slice="0 0 []" style="padding-left: 30px;">templates/index.html</p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
    &lt;title&gt;Index&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;
    &lt;h1&gt;Welcome to User Management&lt;/h1&gt;
    &lt;a href="{{ url_for('add_user') }}"&gt;Add User&lt;/a&gt; |
    &lt;a href="{{ url_for('query_users') }}"&gt;Query Users&lt;/a&gt;
&lt;/body&gt;
&lt;/html&gt;
</pre>
<p data-pm-slice="0 0 []" style="padding-left: 30px;">templates/add.html</p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
    &lt;title&gt;Add User&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;
    &lt;h1&gt;Add User&lt;/h1&gt;
    &lt;form action="{{ url_for('add_user') }}" method="post"&gt;
        &lt;label for="student_id"&gt;Student ID:&lt;/label&gt;
        &lt;input type="text" id="student_id" name="student_id" required&gt;&lt;br&gt;
        &lt;label for="github_account"&gt;GitHub Account:&lt;/label&gt;
        &lt;input type="text" id="github_account" name="github_account" required&gt;&lt;br&gt;
        &lt;label for="notes"&gt;Notes:&lt;/label&gt;
        &lt;textarea id="notes" name="notes"&gt;&lt;/textarea&gt;&lt;br&gt;
        &lt;input type="submit" value="Add"&gt;
    &lt;/form&gt;
    &lt;a href="{{ url_for('index') }}"&gt;Back&lt;/a&gt;
&lt;/body&gt;
&lt;/html&gt;
</pre>
<p data-pm-slice="0 0 []" style="padding-left: 30px;">templates/update.html</p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
    &lt;title&gt;Update User&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;
    &lt;h1&gt;Update User&lt;/h1&gt;
    &lt;form action="{{ url_for('update_user', user_id=user['id']) }}" method="post"&gt;
        &lt;label for="student_id"&gt;Student ID:&lt;/label&gt;
        &lt;input type="text" id="student_id" name="student_id" value="{{ user['student_id'] }}" required&gt;&lt;br&gt;
        &lt;label for="github_account"&gt;GitHub Account:&lt;/label&gt;
        &lt;input type="text" id="github_account" name="github_account" value="{{ user['github_account'] }}" required&gt;&lt;br&gt;
        &lt;label for="notes"&gt;Notes:&lt;/label&gt;
        &lt;textarea id="notes" name="notes"&gt;{{ user['notes'] }}&lt;/textarea&gt;&lt;br&gt;
        &lt;input type="submit" value="Update"&gt;
    &lt;/form&gt;
    &lt;a href="{{ url_for('index') }}"&gt;Back&lt;/a&gt;
&lt;/body&gt;
&lt;/html&gt;
</pre>
<p data-pm-slice="0 0 []" style="padding-left: 30px;">templates/query.html</p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
    &lt;title&gt;Query Users&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;
    &lt;h1&gt;Users&lt;/h1&gt;
    &lt;table&gt;
        &lt;tr&gt;
            &lt;th&gt;ID&lt;/th&gt;
            &lt;th&gt;Student ID&lt;/th&gt;
            &lt;th&gt;GitHub Account&lt;/th&gt;
            &lt;th&gt;Notes&lt;/th&gt;
            &lt;th&gt;Actions&lt;/th&gt;
        &lt;/tr&gt;
        {% for user in users %}
        &lt;tr&gt;
            &lt;td&gt;{{ user['id'] }}&lt;/td&gt;
            &lt;td&gt;{{ user['student_id'] }}&lt;/td&gt;
            &lt;td&gt;{{ user['github_account'] }}&lt;/td&gt;
            &lt;td&gt;{{ user['notes'] }}&lt;/td&gt;
            &lt;td&gt;
                &lt;a href="{{ url_for('update_user', user_id=user['id']) }}"&gt;Update&lt;/a&gt; |
                &lt;a href="{{ url_for('delete_user', user_id=user['id']) }}"&gt;Delete&lt;/a&gt;
            &lt;/td&gt;
        &lt;/tr&gt;
        {% endfor %}
    &lt;/table&gt;
    &lt;a href="{{ url_for('index') }}"&gt;Back&lt;/a&gt;
&lt;/body&gt;
&lt;/html&gt;
</pre>
<p data-pm-slice="0 0 []" style="padding-left: 30px;">3. 啟動應用程式<br/><br/>確保你的 Flask 應用程式和模板文件已經正確配置，然後啟動應用程式：</p>
<pre class="brush:js;auto-links:false;toolbar:false" contenteditable="false">python app.py
</pre>
<p data-pm-slice="0 0 []" style="padding-left: 30px;">接下來, 可以在瀏覽器中訪問 <code>http://127.0.0.1:5000/</code> 來查看和管理你的資料。</p>
<h1>Brython</h1>
<p>從 1 累加到 100:</p>
<p><button id="add1to100">1 add to 100</button></p>
<!-- 導入 brython 程式庫 -->
<p>
<script src="/static/brython.js"></script>
<script src="/static/brython_stdlib.js"></script>
</p>
<!-- 啟動 Brython -->
<p>
<script>
window.onload=function(){
brython({debug:1, pythonpath:['/static/','./../downloads/py/']});
}
</script>
</p>
<p><!-- 導入 FileSaver 與 filereader --></p>
<p>
<script src="/static/ace/FileSaver.min.js" type="text/javascript"></script>
<script src="/static/ace/filereader.js" type="text/javascript"></script>
</p>
<p><!-- 導入 ace --></p>
<p>
<script src="/static/ace/ace.js" type="text/javascript"></script>
<script src="/static/ace/ext-language_tools.js" type="text/javascript"></script>
<script src="/static/ace/mode-python3.js" type="text/javascript"></script>
<script src="/static/ace/snippets/python.js" type="text/javascript"></script>
</p>
<p><!-- 導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫 -->
<script src="/static/Cango-24v03-min.js"></script>
<script src="/static/gearUtils-09.js"></script>
<script src="/static/SVGpathUtils-6v03-min.js"></script>
<script src="/static/sylvester.js"></script>
<script src="/static/PrairieDraw.js"></script>
</p>
<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["kw_py_src1"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>
<p>
<script type="text/javascript">
function doSave(storage_id, filename){
    var blob = new Blob([localStorage[storage_id]], {type: "text/plain;charset=utf-8"});
    filename = document.getElementById(filename).value
    saveAs(blob, filename+".py");
}
</script>
</p>
<p>
<script type="text/python3">
from browser import document as doc
import ace
# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()
Ace1 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run1():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src"]
    except:
        url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace1.editor.setValue(prog)
    Ace1.editor.scrollToRow(0)
    Ace1.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace1.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run1'].bind('click', Ace1.run)
doc['kw_show_console1'].bind('click', Ace1.show_console)
doc['kw_clear_console1'].bind('click', Ace1.clear_console)
doc['clear_bd1'].bind('click', clear_bd1)
# 呼叫函式執行
run1()
</script>
</p>
<p><!-- add 1 to 100 開始 -->
<script type="text/python3">
from browser import document as doc
import ace

# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace2 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )

add1to100_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c48e37714f055c3a0027cbfef59e442a6ef659b9/from_1_add_to_100_1.py"

# 從 gist 取得程式碼
add_src = open(add1to100_url).read()
def add(ev):
    Ace2.editor.setValue(add_src)
    Ace2.editor.scrollToRow(0)
    Ace2.editor.gotoLine(0)
    Ace2.run()

# id 為 "add1to100" 的按鈕點按時, 執行 add 方法
doc["add1to100"].bind('click', add)
</script>
</p>
<p><!-- add 1 to 100 結束--></p>
<!-- editor1 開始 -->
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor1" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<p><!-- 存擋表單開始 --></p>
<form><label>Filename: <input id="kw_filename" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src1', 'kw_filename1');" type="submit" value="Save"/></form>
<p><!-- 存擋表單結束 --></p>
<p></p>
<p><!-- 執行與清除按鈕開始 --></p>
<p><button id="kw_run1">Run</button> <button id="kw_show_console1">Output</button> <button id="kw_clear_console1">清除輸出區</button><button id="clear_bd1">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<p><!-- 執行與清除按鈕結束 --></p>
<p></p>
<p><!-- 程式執行 ouput 區 --></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console1"></textarea></div>
<p><!-- Brython 程式執行的結果, 都以 brython_div1 作為切入位置 --></p>
<div id="brython_div1"></div>
<!-- editor1 結束 --><hr/><!-- ########################################## -->
<p>從 1 累加到 100 part2:</p>
<p><button id="add1to100part2">1 add to 100</button><button id="cango_three_gears">cango_three_gears</button><button id="bsnake">BSnake</button><button id="aitetris">AI Tetris</button><button id="threejsblock">Rotating Block</button></p>
<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["kw_py_src2"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>
<p>
<script type="text/python3">
from browser import document as doc
import ace
# 清除畫布
def clear_bd2(ev):
    bd = doc["brython_div2"]
    bd.clear()
Ace3 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run2():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src2"]
    except:
        url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace3.editor.setValue(prog)
    Ace3.editor.scrollToRow(0)
    Ace3.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace3.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run2'].bind('click', Ace3.run)
doc['kw_show_console2'].bind('click', Ace3.show_console)
doc['kw_clear_console2'].bind('click', Ace3.clear_console)
doc['clear_bd2'].bind('click', clear_bd2)
# 呼叫函式執行
run2()
</script>
</p>
<p><!-- add 1 to 100 part2 開始 -->
<script type="text/python3">
from browser import document as doc
import ace

# 清除畫布
def clear_bd2(ev):
    bd = doc["brython_div2"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace4 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" )

# 透過 Ace4 以類別建立一個通用的 button2, 可以在多個案例中將 gist 程導入編輯區

class button2:
    def __init__(self, url):
        self.url = url

    # 記得加入 event 輸入變數
    def do(self,ev):
        Ace4.editor.setValue(open(self.url).read())
        Ace4.editor.scrollToRow(0)
        Ace4.editor.gotoLine(0)
        Ace4.run()

add1to100_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c48e37714f055c3a0027cbfef59e442a6ef659b9/from_1_add_to_100_1.py"

# 從 gist 取得程式碼
add_src = open(add1to100_url).read()
def add2(ev):
    Ace4.editor.setValue(add_src)
    Ace4.editor.scrollToRow(0)
    Ace4.editor.gotoLine(0)
    Ace4.run()

# id 為 "add1to100part2" 的按鈕點按時, 執行 add 方法
doc["add1to100part2"].bind('click', add2)
# 以下為運用 button2 class 的通用 gist 程式導入區
################################## cango_three_gears start
cango_three_gears_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/cango_three_gears_brython_div2.py"
cango_three_gears = button2(cango_three_gears_url)
doc["cango_three_gears"].bind("click", cango_three_gears.do)
################################## cango_three_gears end
################################## bsnake start
bsnake_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/kmol_snakey.py"
bsnake = button2(bsnake_url)
doc["bsnake"].bind("click", bsnake.do)
################################## bsnake end
################################## aitetris start
aitetris_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/pygame_to_brython_tetris_ai.py"
aitetris = button2(aitetris_url)
doc["aitetris"].bind("click", aitetris.do)
################################## aitetris end
################################## threejsblock start
threejsblock_url = "https://gist.githubusercontent.com/mdecycu/2c6323eff49b496d1bafd210f3ec9707/raw/df37802f9e8a386b6424f7945af622b1cd0a9ca5/threejs_rotating_block.py"
threejsblock = button2(threejsblock_url)
doc["threejsblock"].bind("click", threejsblock.do)
################################## threejsblock end
</script>
</p>
<p><!-- add 1 to 100 part2 結束--></p>
<!-- editor2 開始 -->
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor2" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<p><!-- 存擋表單開始 --></p>
<form><label>Filename: <input id="kw_filename2" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src2', 'kw_filename2');" type="submit" value="Save"/></form>
<p><!-- 存擋表單結束 --></p>
<p></p>
<p><!-- 執行與清除按鈕開始 --></p>
<p><button id="kw_run2">Run</button> <button id="kw_show_console2">Output</button> <button id="kw_clear_console2">清除輸出區</button><button id="clear_bd2">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<p><!-- 執行與清除按鈕結束 --></p>
<p></p>
<p><!-- 程式執行 ouput 區 --></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console2"></textarea></div>
<p><!-- Brython 程式執行的結果, 都以 brython_div1 作為切入位置 --></p>
<div id="brython_div2"></div>
<!-- editor2 結束 --><hr/>
<p>
<script src="https://unpkg.com/three@0.144.0/build/three.js" type="text/javascript"></script>
</p>