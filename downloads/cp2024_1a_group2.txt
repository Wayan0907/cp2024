from browser import document, ajax, html
import random

def generate_pastel_color():
    r = random.randint(200, 255)
    g = random.randint(200, 255)
    b = random.randint(200, 255)
    return f'rgb({r},{g},{b})'

def draw_students(evt):
    data = evt.text
    students = data.strip().split('\n')
    
    if 'brython_div1' not in document:
        div = html.DIV(id='brython_div1')
        document <= div
    
    canvas = html.CANVAS(width=900, height=600)
    document['brython_div1'] <= canvas
    ctx = canvas.getContext('2d')
    
    x, y = 890, 20
    box_width = 80
    students_per_row = 9
    group_size = 3
    
    def draw_student(student, x, y, color=None):
        ctx.strokeRect(x-box_width, y-15, box_width, 30)
        if color:
            ctx.fillStyle = color
            ctx.fillRect(x-box_width+1, y-14, box_width-2, 28)
        ctx.fillStyle = 'black'
        ctx.font = '14px Arial'
        ctx.fillText(student, x-box_width+5, y+5)
    
    def draw_row(row_students, y, colors):
        nonlocal x
        for i, student in enumerate(row_students):
            color = colors[i // group_size]
            draw_student(student, x, y, color)
            x -= box_width + 10
        x = 890
    
    row_pairs = []
    while len(students) >= students_per_row * 2:
        row_pairs.append((students[:students_per_row], students[students_per_row:students_per_row*2]))
        students = students[students_per_row*2:]
    
    for row1, row2 in row_pairs:
        colors = [generate_pastel_color() for _ in range(3)]
        draw_row(row1, y, colors)
        y += 40
        draw_row(row2, y, colors)
        y += 40
    
    # 處理剩餘的學員
    if students:
        remaining = len(students)
        if remaining <= students_per_row:
            # 只剩一行
            groups = (remaining + 3) // 4  # 確保至少有 4 人一組
            colors = [generate_pastel_color() for _ in range(groups)]
            draw_row(students, y, colors * 3)  # *3 確保顏色足夠
        else:
            # 剩兩行，但不足兩個完整行
            colors = [generate_pastel_color() for _ in range(3)]
            row1 = students[:students_per_row]
            row2 = students[students_per_row:]
            draw_row(row1, y, colors)
            y += 40
            draw_row(row2, y, colors)
    
    print(f"Total students drawn: {len(data.strip().split('\n'))}")
    print("done")

def load_data(url):
    req = ajax.ajax()
    req.bind('complete', draw_students)
    req.open('GET', url, True)
    req.send()

load_data('https://mde.tw/2024/1a.txt')